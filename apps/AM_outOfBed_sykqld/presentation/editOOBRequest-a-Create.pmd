{
  "id": "editOOBRequest-a-Create",
  "endPoints": [
    {
      "name": "getCurrentWorker",
      "baseUrlType": "WORKDAY-COMMON",
      "url": "/workers/me",
      "authType": "sso"
    },
    {
      "name": "getOOBProfile",
      "baseUrlType": "APP-V1",
      "url": "/oobProfiles",
      "authType": "sso"
    },
    {
      "name": "getOOBProfileWQL",
      "baseUrlType": "WORKDAY-WQL",
      "url": "<% '/data?query=' + ('SELECT createdMoment, workdayID AS id, worker, sts, mobileNumbers{workdayID AS id, name, number, countryCode, notes} as mobileNumbers, frequentTravellers{workdayID, name} as frequentTravellers, favouriteDestinations{name} as favouriteDestinations FROM outOfBed_sykqld_oobProfiles ORDER BY createdMoment DESC').urlEncode() %>",
      "authType": "sso"
    },
    {
      "name": "getWorkerDetails",
      "baseUrlType": "WORKDAY-WQL",
      "url": "<% '/data?query=' + OOB.getWorkerDetails('phoneNumbers, workerIsContingentWorker, dependents{name, phoneNumber_PrimaryWithCountryCode, relationship, cf_XTNDOOBTFIsSpouse AS isSpouse}, cf_CFLRVUnitIDTextWorker AS unitId, jobFamilyGroup', empty(onBehalf) ?  'worker in (' + getCurrentWorker.id +')' : '') %>",
      "authType": "sso"
    },
    {
      "name": "getWorkerFromSameUnit",
      "baseUrlType": "WORKDAY-WQL",
      "exclude": "<% empty(getWorkerDetails.data[0]) || empty(getWorkerDetails.data[0].unitId) %>",
      "url": "<% '/data?query=' + ('SELECT worker, dependents{name, phoneNumber_PrimaryWithCountryCode, relationship, cf_XTNDOOBTFIsSpouse AS isSpouse} as dependent FROM workersForHCMReporting (dataSourceFilter = allActiveWorkers) WHERE cf_CFLRVUnitIDTextWorker =\"' + (!empty(getWorkerDetails.data[0]) && !empty(getWorkerDetails.data[0].unitId) ? getWorkerDetails.data[0].unitId : '') + '\"').urlEncode() %>",
      "authType": "wcpisu"
    },
    {
      "name": "getPhoneCodes",
      "httpMethod": "GET",
      "authType": "sso",
      "deferred": true,
      "url": "<% 'https://api.workday.com/referenceData/country_phone_code/vers/latest/search?q=' + instanceListQuery %>"
    },
    {
      "name": "getTimeOffTypes",
      "baseUrlType": "WORKDAY-WQL",
      "url": "<% '/data?query=' + ('SELECT timeOffType FROM timeOffTypes').urlEncode() %>",
      "authType": "wcpisu"
    },
    {
      "name": "getStatuses",
      "baseUrlType": "WORKDAY-WQL",
      "url": "<% '/data?query=' + ('SELECT workdayID, statusID, description FROM outOfBed_sykqld_status where statusID = \\'1\\'').urlEncode() %>",
      "authType": "wcpisu"
    },
    {
      "name": "getOOBRequest",
      "baseUrlType": "WORKDAY-WQL",
      "exclude": "<%empty(queryParams.oobRequest)%>",
      "url": "<% '/data?query=' + ('SELECT workdayID AS id, createdMoment, OOBRequest, name, purpose, startDate, expectedEndDate, endDate, sts, otherSTS, alternateArrangementForChildren, elevatedRisk, elevatedRiskSituation, initiatorComments, traveller, status, affinity, phoneNumbers{workdayID AS id, name, number, countryCode, notes} as phoneNumbers, accompanyingTravellers{firstName, lastName, fromProfile} as accompanyingTravellers, lodging{startDate, endDate, name, countryCode, addressLine1, addressLine2, addressLine3, city, state, contactNumber,travellerName, postalCode} as lodging FROM outOfBed_sykqld_oobRequests WHERE workdayID in (\"' + (!empty(flowVariables.oobRequest) ? flowVariables.oobRequest : queryParams.oobRequest) +'\") ORDER BY createdMoment DESC').urlEncode() %>",
      "authType": "sso"
    },
    {
      "name": "getPersonalTimeOff",
      "baseUrlType": "WORKDAY-WQL",
      "exclude": "<%empty(queryParams.oobRequest)%>",
      "url": "<% '/data?query=' + ('SELECT workdayID AS id, worker, oobRequest, type AS leaveType, startDate, endDate FROM outOfBed_sykqld_personalTimeOffs WHERE oobRequest in ('+  (!empty(flowVariables.oobRequest) ? flowVariables.oobRequest : queryParams.oobRequest) + ') ORDER BY createdMoment DESC').urlEncode() %>",
      "authType": "sso"
    },
    {
      "name": "getAccompanyTravllers",
      "baseUrlType": "WORKDAY-WQL",
      "exclude": "<% empty(queryParams.oobRequest )%>",
      "url": "<% '/data?query=' + ('SELECT workdayID AS id, sts, departureDate, arrivalDate, modeOfTransport, departurePoint, arrivalPoint, firstName, lastName, fromProfile, airline, assignedVehicle, otherTransport, transportNumber, carDetails, departureTime, arrivalTime, addToOOBProfile FROM outOfBed_sykqld_accompanyingTravellers WHERE oobRequest in ('+ (!empty(flowVariables.oobRequest) ? flowVariables.oobRequest : queryParams.oobRequest) + ') ORDER BY createdMoment DESC').urlEncode() %>",
      "authType": "sso"
    },
    {
      "name": "getDestinations",
      "baseUrlType": "WORKDAY-WQL",
      "url": "<% '/data?query=' + ('SELECT workdayID AS id FROM outOfBed_sykqld_destinations WHERE ON oobRequest workdayID is not null AND workdayID = \\'' + (!empty(flowVariables.oobRequest) ? flowVariables.oobRequest : queryParams.oobRequest) +  '\\' WHERE travellerName = \\''+ searchValue +'\\' AND oobRequest is not empty').urlEncode() %>",
      "authType": "wcpisu",
      "deferred": true
    },
    {
      "name": "getDestinationsData",
      "baseUrlType": "WORKDAY-WQL",
      "url": "<% '/data?query=' + ('SELECT name , countryCode, addressLine1, addressLine2, addressLine3, city, state, postalCode, contactNumber, other, startDate, endDate, travellerName, addToProfile, oobRequest, oobProfile FROM outOfBed_sykqld_destinations WHERE ON oobRequest workdayID is not null AND workdayID = \\'' + (!empty(flowVariables.oobRequest) ? flowVariables.oobRequest : queryParams.oobRequest) +  '\\' WHERE oobRequest is not empty').urlEncode() %>",
      "authType": "wcpisu"
    }
  ],
  "outboundData": {
    "outboundEndPoints": [
      {
        "name": "createFrequentTravellers",
        "url": "<% `https://api.workday.com/apps/outOfBed_sykqld/v1/frequentTravellers?bulk=true` %>",
        "authType": "wcpisu",
        "httpMethod": "POST",
        "onSend": "<%
                   self.data = {'data':[]};
                   for (var otherMembers : OtherMemberGrid.getRows()) {
                       if(!empty(otherMembers.childrenMap.addToOOBCol.value) && otherMembers.childrenMap.addToOOBCol.value == true){
                           self.data.data.add({'name': otherMembers.childrenMap.otherMemberCol.value});
                       }
                   }
                   self.data;
                   %>",
        "failOnStatusCodes": [
          {
            "code": 400
          },
          {
            "code": 403
          }
        ]
      },
      {
        "name": "createMobileNumbers",
        "url": "<% `https://api.workday.com/apps/outOfBed_sykqld/v1/mobileNumbers?bulk=true` %>",
        "authType": "wcpisu",
        "httpMethod": "POST",
        "failOnStatusCodes": [
          {
            "code": 400
          },
          {
            "code": 403
          }
        ],
        "onSend": "<%
                   self.data = {'data':[]};
                   self.data.data.addAll(getPhoneData(false, false));
                   return self.data;
                   %>"
      },
      {
        "name": "createOOBRequest",
        "url": "<% `https://api.workday.com/apps/outOfBed_sykqld/v1/oobRequests` %>",
        "authType": "sso",
        "httpMethod": "POST",
        "exclude": "<% (!empty(queryParams.isEdit) && queryParams.isEdit && empty(flowVariables.oobRequest)) || (!empty(queryParams.isEdit) && queryParams.isEdit && !empty(flowVariables.oobRequest)) || ((empty(queryParams.isCopy) || !queryParams.isCopy) && !empty(flowVariables.oobRequest))%>",
        "onSend": "<% return self.data; %>",
        "failOnStatusCodes": [
          {
            "code": 400
          },
          {
            "code": 403
          }
        ],
        "values": [
          {
            "outboundPath": "initiator.id",
            "value": "<% !empty(getCurrentWorker) ? getCurrentWorker.id : '' %>"
          },
          {
            "outboundPath": "name",
            "value": "<% !empty(tripNameTxt.value) ? tripNameTxt.value : '' %>"
          },
          {
            "outboundPath": "purpose",
            "value": "<% !empty(tripPurposeTxtA.value) ? tripPurposeTxtA.value : '' %>"
          },
          {
            "outboundPath": "startDate",
            "value": "<% !empty(startDateDt.value) ?  Dates.getDateFormatted(startDateDt.value) : null %>"
          },
          {
            "outboundPath": "expectedEndDate",
            "value": "<% !empty(endDateDt.value) ? Dates.getDateFormatted(endDateDt.value) : null %>"
          },
          {
            "outboundPath": "endDate",
            "value": "<% !empty(endDateDt.value) ? Dates.getDateFormatted(endDateDt.value) : null %>"
          },
          {
            "outboundPath": "sts",
            "value": "<% !empty(stsIL.selectedEntries[0]) ? stsIL.selectedEntries[0].descriptor : '' %>"
          },
          {
            "outboundPath": "otherSTS",
            "value": "<% !empty(otherStsTxt.value) ? otherStsTxt.value : '' %>"
          },
          {
            "outboundPath": "alternateArrangementForChildren",
            "value": "<% !empty(alternativeTxtA.value) ? alternativeTxtA.value : '' %>"
          },
          {
            "outboundPath": "phoneNumbers",
            "exclude": "<% empty(createMobileNumbers.data) && empty(allNumbers.getRows()) %>",
            "value": "<% createMobileNumbers.data.map(x=> {{'id' : x.body.id}})%>"
          },
          {
            "outboundPath": "elevatedRisk",
            "value": "<% elevatedRiskRG.value == ['yes'] ? true : false %>"
          },
          {
            "outboundPath": "elevatedRiskSituation",
            "value": "<% !empty(elevatedRiskTxtA) ? elevatedRiskTxtA.value : '' %>"
          },
          {
            "outboundPath": "initiatorComments",
            "value": "<% !empty(addCommentsOnBehalfOfTxtA) ? addCommentsOnBehalfOfTxtA.value : '' %>"
          },
          {
            "outboundPath": "traveller.id",
            "value": "<% !empty(getCurrentWorker) ? getCurrentWorker.id : '' %>"
          },
          {
            "outboundPath": "cancelConfirmation",
            "value": "<% 'true' %>"
          },
          {
            "outboundPath": "status.id",
            "value": "<% getStatuses.data.find(x => {x.description == 'Draft'}).workdayID %>"
          },
          {
            "outboundPath": "affinity",
            "value": "<% '' %>"
          }
        ]
      },
      {
        "name": "deletePersonalTimeOff",
        "url": "<% 'https://api.workday.com/apps/outOfBed_sykqld/v1/personalTimeOffs/' + personalTimeOffWID.value %>",
        "httpMethod": "DELETE",
        "authType": "sso",
        "onSend": "<%
          self.data ={'data': []};
          return self.data;
        %>",
        "exclude": "<% empty(personalTimeOffWID.value) %>"
      },
      {
        "name": "createAccompanyingTravellers",
        "url": "<% `https://api.workday.com/apps/outOfBed_sykqld/v1/accompanyingTravellers?bulk=true` %>",
        "authType": "sso",
        "httpMethod": "POST",
        "onSend": "<%
                   self.data = {'data' : []};
                   self.data.data.addAll(getAllAccompanyingTravellers().data);
                   return self.data;
                   %>",
        "failOnStatusCodes": [
          {
            "code": 400
          },
          {
            "code": 403
          }
        ]
      },
      {
        "name": "createPersonalTimeOff",
        "url": "<% `https://api.workday.com/apps/outOfBed_sykqld/v1/personalTimeOffs?bulk=true` %>",
        "authType": "sso",
        "httpMethod": "POST",
        "failOnStatusCodes": [
          {
            "code": 400
          },
          {
            "code": 403
          }
        ],
        "exclude": "<% empty(personalTimeGrid.getRows()) %>",
        "onSend": "<%
                   self.data = {'data':[]};
                   self.data.data.addAll(getPTGridData(false));
                   return self.data;
                   %>"
      },
      {
        "name": "updatePersonalTimeOff",
        "url": "<% `https://api.workday.com/apps/outOfBed_sykqld/v1/personalTimeOffs?bulk=true` %>",
        "authType": "sso",
        "httpMethod": "PATCH",
        "failOnStatusCodes": [
          {
            "code": 400
          },
          {
            "code": 403
          }
        ],
        "exclude": "<% empty(personalTimeGrid.getRows()) %>",
        "onSend": "<%
          self.data = {'data':[]};
          self.data.data.addAll(getPTGridData(true));
          return self.data;
        %>"
      },
      {
        "name": "updateOOBProfile",
        "url": "<% 'https://api.workday.com/apps/outOfBed_sykqld/v1/oobProfiles/' + getOOBProfile.data[0].id %>",
        "authType": "sso",
        "httpMethod": "PATCH",
        "failOnStatusCodes": [
          {
            "code": 400
          },
          {
            "code": 403
          }
        ],
        "values": [
          {
            "outboundPath": "frequentTravellers",
            "value": "<%
                      var frequentTravellers = !empty(getOOBProfileWQL.data[0]) && !empty(getOOBProfileWQL.data[0].frequentTravellers) ? getOOBProfileWQL.data[0].frequentTravellers.map(x => {{'id' : x.workdayID}}) : [];
                      if(!empty(createFrequentTravellers.data)){
                          frequentTravellers.addAll(createFrequentTravellers.data.map(x=> {{'id' : x.body.id}}));
                      }
                      return frequentTravellers;
                      %>"
          }
        ]
      },
      {
        "name": "updateAccompanyTravellers",
        "url": "<% 'https://api.workday.com/apps/outOfBed_sykqld/v1/accompanyingTravellers?bulk=true' %>",
        "authType": "sso",
        "httpMethod": "PATCH",
        "exclude": "<% empty(saveForLaterBtn.value) || saveForLaterBtn.value == false %>",
        "failOnStatusCodes": [
          {
            "code": 400
          },
          {
            "code": 403
          }
        ],
        "onSend": "<%
                   self.data = {'data':[]};
                   var listOfAccompanyTravellers = createAccompanyingTravellers.data.map(x=> {{'id' : x.body.id}});
                   for(var x : listOfAccompanyTravellers){
                       //self.data.data.add({'id' : x.id, 'oobRequest' : {'id' : !empty(queryParams.oobRequest) ? queryParams.oobRequest : flowVariables.oobRequest }});
                       self.data.data.add({'id' : x.id, 'oobRequest' : {'id' : !empty(queryParams.oobRequest) ? queryParams.isCopy ? createOOBRequest.id : queryParams.oobRequest : flowVariables.oobRequest }});
                   }
                   self.data;
                   %>"
      },
      {
        "name": "updateMobileNumbers",
        "url": "<% `https://api.workday.com/apps/outOfBed_sykqld/v1/mobileNumbers?bulk=true` %>",
        "authType": "wcpisu",
        "httpMethod": "PATCH",
        "failOnStatusCodes": [
          {
            "code": 400
          },
          {
            "code": 403
          }
        ],
        "onSend": "<%
                   self.data = {'data':[]};
                   self.data.data.addAll(getPhoneData(true, false));
                   return self.data;
                   %>"
      },
      {
        "name": "updateOOBRequest",
        "url": "<% `https://api.workday.com/apps/outOfBed_sykqld/v1/oobRequests/` + queryParams.oobRequest %>",
        "authType": "sso",
        "httpMethod": "PATCH",
        "exclude": "<% empty(flowVariables.oobRequest) && !empty(queryParams.isCopy) && queryParams.isCopy %>",
        "onSend": "<% return self.data;  %>",
        "failOnStatusCodes": [
          {
            "code": 400
          },
          {
            "code": 403
          }
        ],
        "values": [
          {
            "outboundPath": "initiator.id",
            "value": "<% !empty(getCurrentWorker) ? getCurrentWorker.id : '' %>"
          },
          {
            "outboundPath": "name",
            "value": "<% !empty(tripNameTxt.value) ? tripNameTxt.value : '' %>"
          },
          {
            "outboundPath": "purpose",
            "value": "<% !empty(tripPurposeTxtA.value) ? tripPurposeTxtA.value : '' %>"
          },
          {
            "outboundPath": "startDate",
            "value": "<% !empty(startDateDt.value) ?  Dates.getDateFormatted(startDateDt.value) : null %>"
          },
          {
            "outboundPath": "expectedEndDate",
            "value": "<% !empty(endDateDt.value) ? Dates.getDateFormatted(endDateDt.value) : null %>"
          },
          {
            "outboundPath": "endDate",
            "value": "<% !empty(endDateDt.value) ? Dates.getDateFormatted(endDateDt.value) : null %>"
          },
          {
            "outboundPath": "sts",
            "value": "<% !empty(stsIL.selectedEntries[0]) ? stsIL.selectedEntries[0].descriptor : '' %>"
          },
          {
            "outboundPath": "otherSTS",
            "value": "<% !empty(otherStsTxt.value) ? otherStsTxt.value : '' %>"
          },
          {
            "outboundPath": "accompanyingTravellers",
            "exclude": true,
            "value": "<% return getAccompanyingTravellers();%>"
          },
          {
            "outboundPath": "alternateArrangementForChildren",
            "value": "<% !empty(alternativeTxtA.value) ? alternativeTxtA.value : '' %>"
          },
          {
            "outboundPath": "phoneNumbers",
            "_exclude": "<% empty(createMobileNumbers.data) && empty(allNumbers.getRows()) %>",
            "value": "<%
                      var allMobileNumbers =[];
                      allMobileNumbers.addAll(createMobileNumbers.data.map(x=> {{'id' : x.body.id}}));
                      allMobileNumbers.addAll(getPhoneData(false, true).map(x => {{'id' : x.id}}));
                      return !empty(allMobileNumbers) ? allMobileNumbers : [{:}];
                      %>"
          },
          {
            "outboundPath": "elevatedRisk",
            "value": "<% elevatedRiskRG.value == ['yes'] ? true : false %>"
          },
          {
            "outboundPath": "elevatedRiskSituation",
            "value": "<% !empty(elevatedRiskTxtA) ? elevatedRiskTxtA.value : '' %>"
          },
          {
            "outboundPath": "initiatorComments",
            "value": "<% !empty(addCommentsOnBehalfOfTxtA) ? addCommentsOnBehalfOfTxtA.value : '' %>"
          },
          {
            "outboundPath": "traveller.id",
            "value": "<% !empty(getCurrentWorker) ? getCurrentWorker.id : '' %>"
          },
          {
            "outboundPath": "cancelConfirmation",
            "value": "<% 'true' %>"
          },
          {
            "outboundPath": "status.id",
            "value": "<% getStatuses.data.find(x => {x.description == 'Draft'}).workdayID %>"
          },
          {
            "outboundPath": "affinity",
            "value": "<% '' %>"
          }
        ]
      },
      {
        "name": "deletePhoneNumber",
        "url": "<% 'https://api.workday.com/apps/outOfBed_sykqld/v1/mobileNumbers/' + numberId.value %>",
        "httpMethod": "DELETE",
        "authType": "wcpisu",
        "onSend": "<%
                  self.data ={'data': []};
                  return self.data;
                  %>",
        "exclude": "<% empty(numberId.value) %>"
      },
      {
        "name": "deleteAccompanyingTravellers",
        "url": "<% `https://api.workday.com/apps/outOfBed_sykqld/v1/accompanyingTravellers/` + accompanyingMemberID.value %>",
        "authType": "sso",
        "httpMethod": "DELETE",
        "exclude": "<% empty(accompanyingMemberID.value) %>",
        "failOnStatusCodes": [
          {
            "code": 400
          },
          {
            "code": 403
          }
        ]
      },
      {
        "name": "deleteDestinations",
        "url": "<% 'https://api.workday.com/apps/outOfBed_sykqld/v1/destinations?bulk=true' %>",
        "authType": "wcpisu",
        "httpMethod": "DELETE",
        "exclude": "<% empty(destinationsToDelete()) %>",
        "onSend":"<%
          self.data = {'data':[]};
          self.data.data.addAll(destinationsToDelete());
          return self.data;
        %>",
        "failOnStatusCodes": [
          {
            "code": 400
          },
          {
            "code": 403
          }
        ]
      },
      {
        "name": "createDestinations",
        "url": "<% `https://api.workday.com/apps/outOfBed_sykqld/v1/destinations?bulk=true` %>",
        "authType": "wcpisu",
        "httpMethod": "POST",
        "exclude": "<% !empty(flowVariables.oobRequest) && !empty(queryParams.isCopy) && !queryParams.isCopy %>",
        "onSend": "<%
          self.data = {'data':[]};
          self.data.data.addAll(destinationsToCreate());
          return self.data;
        %>",
        "failOnStatusCodes": [
          {
            "code": 400
          },
          {
            "code": 403
          }
        ]
      },
      {
        "name": "transitionOutboundVars",
        "type": "outboundVariable",
        "variableScope": "flow",
        "values": [
          {
            "outboundPath": "saveForLater",
            "value": "<% !empty(saveForLaterBtn.value) && saveForLaterBtn.value ==true %>"
          },
          {
            "outboundPath": "proceed",
            "value": "<% !empty(nextBtn.value) && nextBtn.value == true %>"
          },
          {
            "outboundPath": "name",
            "value": "<% !empty(tripNameTxt.value) ? tripNameTxt.value : '' %>"
          },
          {
            "outboundPath": "purpose",
            "value": "<% !empty(tripPurposeTxtA.value) ? tripPurposeTxtA.value : '' %>"
          },
          {
            "outboundPath": "startDate",
            "value": "<% !empty(startDateDt.value) ?  Dates.getDateFormatted(startDateDt.value) : null %>"
          },
          {
            "outboundPath": "endDate",
            "value": "<% !empty(endDateDt.value) ? endDateDt.value : null %>"
          },
          {
            "outboundPath": "sts",
            "value": "<% !empty(stsIL.selectedEntries[0]) ? stsIL.selectedEntries[0].descriptor : '' %>"
          },
          {
            "outboundPath": "otherSTS",
            "value": "<% !empty(otherStsTxt.value) ? otherStsTxt.value : '' %>"
          },
          {
            "outboundPath": "accompanyingTravellerNames",
            "value": "<% getAllAccompanyingTravellers() %>"
          },
          {
            "outboundPath": "accompanyingTravellers",
            "value": "<% ! empty(createAccompanyingTravellers.data) ? createAccompanyingTravellers.data.map(x=> {{'id' : x.body.id}}) : [];    %>"
          },
          {
            "outboundPath": "alternateArrangementForChildren",
            "value": "<% !empty(alternativeTxtA.value) ? alternativeTxtA.value : '' %>"
          },
          {
            "outboundPath": "phoneNumbers",
            "value": "<% createMobileNumbers.data.map(x=> {{'id' : x.body.id}}) %>"
          },
          {
            "outboundPath": "elevatedRisk",
            "value": "<% (elevatedRiskRG.value == ['yes']) %>"
          },
          {
            "outboundPath": "elevatedRiskSituation",
            "value": "<% !empty(elevatedRiskTxtA) ? elevatedRiskTxtA.value : '' %>"
          },
          {
            "outboundPath": "initiatorComments",
            "value": "<% !empty(addCommentsOnBehalfOfTxtA) ? addCommentsOnBehalfOfTxtA.value : '' %>"
          },
          {
            "outboundPath": "traveller",
            "value": "<% 'singleInstance' %>"
          },
          {
            "outboundPath": "lodging.id",
            "value": "''"
          },
          {
            "outboundPath": "cancelConfirmation",
            "value": "''"
          },
          {
            "outboundPath": "status",
            "value": "''"
          },
          {
            "outboundPath": "initiator",
            "value": "<% !empty(getCurrentWorker) ? getCurrentWorker.id : '' %>"
          },
          {
            "outboundPath": "affinity",
            "value": "<% '' %>"
          },
          {
            "outboundPath": "oobRequest",
            "value": "<% queryParams.isCopy ? createOOBRequest.id : queryParams.oobRequest %>"
          },
          {
            "outboundPath": "deleteData",
            "value": "<% !empty(queryParams.oobRequest) ?  queryParams.oobRequest : '' %>"
          },
          {
            "outboundPath": "oobProfileID",
            "value": "<% !empty(getOOBProfileWQL.data[0]) && !empty(getOOBProfileWQL.data[0].id) ? getOOBProfileWQL.data[0].id : '' %>"
          },
          {
            "outboundPath": "backBtn",
            "value": "<% !empty(backBtn.value) && backBtn.value == true %>"
          }
        ]
      }
    ]
  },
  "include": [
    "OOB.script",
    "Dates.script"
  ],
  "onLoad": "<%
     pageVariables.hasOOBProfile = !empty(getOOBProfileWQL.data);
     pageVariables.frequentTravellers = familyMemberGridValues(true);
     pageVariables.frequentTravellersStaff = getStaffGridValues(true) ;
     pageVariables.frequentTravellersStaffOLD = !empty(getOOBProfileWQL.data) && !empty(getOOBProfileWQL.data[0].frequentTravellers) ? getOOBProfileWQL.data[0].frequentTravellers.map(x => {{'id' : x.workdayID, 'name' : x.name}}) : [];
     pageVariables.phoneNumbers = getPhoneNumbers().add({'id': 'other', 'number': 'Other', 'name': 'Other'}) ;
     pageVariables.isField = !empty(getWorkerDetails.data[0].jobFamilyGroup.find(x => {x.descriptor == 'Field'}));
     pageVariables.hasChildren = false;
     pageVariables.TimeOffTypes = !empty(getTimeOffTypes.data) && !empty(getTimeOffTypes.data[0].timeOffType) ? getTimeOffTypes.data.map(result => {result.timeOffType}) : [];
     pageVariables.WorkerPhoneNumbers = getWorkerDetails.data[0].phoneNumbers ?: [];
     %>",
  "script": "<%
    var destinationsToDelete = function(){
      var travellersOnLoad = [];
      var gridAccompanyingTravellers = [];
      var travellersToRemove = [];
      var listOfIDs = [];
      if(!empty(getAccompanyTravllers.data)){
        travellersOnLoad.addAll(getAccompanyTravllers.data.map(x => {{'name' : x.firstName + ' ' + x.lastName}}));
      }
        if(!empty(accompanyignTravellersGrid.getRows())) {
          for( var x : accompanyignTravellersGrid.getRows()){
            if(!empty(x.accompanyingMemberCol.childrenMap.accompanyingMemberFullName.value)){
             gridAccompanyingTravellers.add(x.accompanyingMemberCol.childrenMap.accompanyingMemberFullName.value);
            }
          }
        }
      travellersToRemove = list:excludeMultiple(travellersOnLoad, 'name', gridAccompanyingTravellers);
        for(var x : travellersToRemove){
          listOfIDs.addAll(getDestinations.invoke({'searchValue': x.name}).data);
        }
        return listOfIDs;
      }

    var destinationsToCreate = function(){
      var travellersOnLoad = [];
      var addDestinations = !empty(getDestinationsData.data) ? getDestinationsData.data : [];

      for(var x : addDestinations){
        x.oobRequest = {'id': !empty(createOOBRequest.id) ? createOOBRequest.id : ''};
        x.oobProfile = {'id': !empty(getOOBProfile.data[0].id) ? getOOBProfile.data[0].id : ''};
        x.addToProfile = false;
      }
      return addDestinations;
    }


     var familyMemberGridValues = function (onLoad){
       var familyAndFrequent =[];
       var hasChildrenValue = 0;
       if(!empty(getWorkerFromSameUnit.data)){
         for (var item : getWorkerFromSameUnit.data){
           familyAndFrequent.add({'id': item.worker.id, 'name': item.worker.descriptor});
           if(!empty(item)){
             for( var child : item.dependent){
               if(child.isSpouse != true){
                 familyAndFrequent.add({'id': child.name, 'name': child.name, 'relationship': child.relationship.descriptor});
                 child.relationship.descriptor.lowerCase() == 'child' ? hasChildrenValue += 1 : hasChildrenValue ;
               }
             }
           }
         }
       }else{
           familyAndFrequent.add({'id': getWorkerDetails.data[0].worker.id,'name': getWorkerDetails.data[0].worker.descriptor})
       }

         if(!empty(getOOBProfileWQL.data) && !empty(getOOBProfileWQL.data[0].frequentTravellers)) {
         familyAndFrequent.addAll(getOOBProfileWQL.data[0].frequentTravellers.map(x => {{'id' : x.workdayID, 'name' : x.name}}));
         }

         var familyAndFrequentWithoutAccompany = [];
         if(empty(accompanyignTravellersGrid.getRows()) && !empty(getAccompanyTravllers.data) && onLoad){
          var listOfNames = getAccompanyTravllers.data.map(x => {x.firstName + ' ' + x.lastName});
          familyAndFrequentWithoutAccompany = list:excludeMultiple(familyAndFrequent, 'name', listOfNames );
         }  else if(!empty(accompanyignTravellersGrid.getRows())){
           var listOfNames = [];
           for( var x : accompanyignTravellersGrid.getRows()){
             if(!empty(x.accompanyingMemberCol.childrenMap.accompanyingMemberFullName.value)){
               listOfNames.add(x.accompanyingMemberCol.childrenMap.accompanyingMemberFullName.value);
             }
           }
           familyAndFrequentWithoutAccompany = list:excludeMultiple(familyAndFrequent, 'name', listOfNames );
         }

         if(hasChildrenValue > 0) {
             pageVariables.hasChildren=true
         }else{
             pageVariables.hasChildren=false;
         }

         return !empty(getAccompanyTravllers.data) ? familyAndFrequentWithoutAccompany : familyAndFrequent;
     }

    var getStaffGridValues = function (onLoad){
        var fieldFrequentTravellers = [{'id': getWorkerDetails.data[0].worker.id,'name': getWorkerDetails.data[0].worker.descriptor}];

        if(!empty(getOOBProfileWQL.data) && !empty(getOOBProfileWQL.data[0].frequentTravellers)){
            fieldFrequentTravellers.addAll(getOOBProfileWQL.data[0].frequentTravellers.map(x => {{'id' : x.workdayID, 'name' : x.name}}));
        }

        var fieldWithoutAccompany = [];
        if(!empty(getAccompanyTravllers.data) && empty(fieldMemberGrid.getRows()) && onLoad){
            var listOfNames = getAccompanyTravllers.data.map(x => {x.firstName + ' ' + x.lastName});
                fieldWithoutAccompany = list:excludeMultiple(fieldFrequentTravellers, 'name', listOfNames );
        }else if ( !empty(accompanyignTravellersGrid.getRows())){
            var listOfNames = [];
                for( var x : fieldMemberGrid.getRows()){
                    if(x.familyMemberCol.childrenMap.worker.value){
                        listOfNames.add(x.accompanyingMemberCol.childrenMap.accompanyingMemberFullName.value);
                    }
                }
                fieldWithoutAccompany = list:excludeMultiple(fieldFrequentTravellers, 'name', listOfNames );
        }

        return !empty(getAccompanyTravllers.data) ? fieldWithoutAccompany : fieldFrequentTravellers;

    }

     var setMembersGrid = function (){
         var gridValues = familyMemberGridValues(false);
         fieldMemberGrid.setRows(gridValues ?: []);
     }

    var getPhoneNumbers = function(){
      var phoneNumbersPV = !empty(getOOBProfileWQL.data) && !empty(getOOBProfileWQL.data[0].mobileNumbers) ? getOOBProfileWQL.data[0].mobileNumbers : [] ;
      if(!empty(getWorkerDetails.data[0] && !empty(getWorkerDetails.data[0].phoneNumbers))){
        for (var numberVar : getWorkerDetails.data[0].phoneNumbers){
          phoneNumbersPV.add({'id' : numberVar.id, 'number': numberVar.descriptor,  'name': numberVar.descriptor});
        }
      }
      return phoneNumbersPV;
    }

    var childrenArrangments = function(){
      var counter = fieldMemberGrid.getRows().filter(x => { (x.childrenMap.familyMemberCol.childrenMap.relationship.value ?: '') == 'Child' });
      for(var children : counter){
       if(!children.isSelected()){
         alternativeTxtA.setVisible(true);
         alternativeTxtA.setRequired(true);
         AlternativeRTxt.setVisible(true);
       }else{
         alternativeTxtA.setVisible(false);
         alternativeTxtA.setRequired(false);
         AlternativeRTxt.setVisible(false);
       }
      }
    }

    var getAllAccompanyingTravellers = function(){
      var addAccompanyingTraveller = [];
      var otherAccompanyingTraveller = [];

      for (var otherMembers : OtherMemberGrid.getRows()) {
        addAccompanyingTraveller.add({
          'firstName': otherMembers.childrenMap.otherMemberCol.value.substringBefore(' '),
          'lastName': otherMembers.childrenMap.otherMemberCol.value.substringAfter(' '),
          'addToOOBProfile': otherMembers.childrenMap.addToOOBCol.value,
          //'oobRequest': {'id': !empty(queryParams.oobRequest) ? queryParams.oobRequest : !empty(flowVariables.oobRequest)  ? flowVariables.oobRequest : ''},
          'oobRequest': {'id': !empty(flowVariables.oobRequest) ? flowVariables.oobRequest : !empty(queryParams.isCopy) && queryParams.isCopy ?  createOOBRequest.id : queryParams.oobRequest }
        });
      }
      if(!empty(staffMemberGrid.getSelectedRows())){
        for ( var selectedMembers : staffMemberGrid.getSelectedRows()) {
          addAccompanyingTraveller.add( {
            'firstName': selectedMembers.childrenMap.staffMemberCol.childrenMap.staffMemberName.value.substringBefore(' '),
            'lastName': selectedMembers.childrenMap.staffMemberCol.childrenMap.staffMemberName.value.substringAfter(' '),
            'addToOOBProfile': false,
            //'oobRequest': {'id': !empty(queryParams.oobRequest) ? queryParams.oobRequest : !empty(flowVariables.oobRequest)  ? flowVariables.oobRequest : ''}
            'oobRequest': {'id': !empty(flowVariables.oobRequest) ? flowVariables.oobRequest : !empty(queryParams.isCopy) && queryParams.isCopy ?  createOOBRequest.id : queryParams.oobRequest }
          });
        }
      }

      if(!empty(fieldMemberGrid.getSelectedRows())){
        for ( var i : fieldMemberGrid.getSelectedRows()) {
          addAccompanyingTraveller.add( {
            'firstName': i.childrenMap.familyMemberCol.childrenMap.worker.value.substringBefore(' '),
            'lastName': i.childrenMap.familyMemberCol.childrenMap.worker.value.substringAfter(' '),
            'addToOOBProfile': false,
            //'oobRequest': {'id': !empty(queryParams.oobRequest) ? queryParams.oobRequest : !empty(flowVariables.oobRequest)  ? flowVariables.oobRequest : ''}
            'oobRequest': {'id': !empty(flowVariables.oobRequest) ? flowVariables.oobRequest : !empty(queryParams.isCopy) && queryParams.isCopy ?  createOOBRequest.id : queryParams.oobRequest }
          });
        }
      }

      if(!empty(accompanyignTravellersGrid.getRows()) && empty(flowVariables.oobRequest) && !empty(queryParams.isCopy) && queryParams.isCopy){
        for ( var i : accompanyignTravellersGrid.getRows()) {

          var travellerData = !empty(getAccompanyTravllers.data.find(x => {x.id == i.accompanyingMemberCol.childrenMap.accompanyingMemberID.value})) ? getAccompanyTravllers.data.find(x => {x.id == i.accompanyingMemberCol.childrenMap.accompanyingMemberID.value}) : [];
          addAccompanyingTraveller.add( {
            'departureDate' : !empty(travellerData.departureDate) ? travellerData.departureDate : '',
            'arrivalDate' : !empty(travellerData.arrivalDate) ? travellerData.arrivalDate : '',
            'modeOfTransport' : !empty(travellerData.modeOfTransport) ? travellerData.modeOfTransport : '',
            'departurePoint' : !empty(travellerData.departurePoint) ? travellerData.departurePoint : '',
            'arrivalPoint' : !empty(travellerData.arrivalPoint) ? travellerData.arrivalPoint : '',
            'firstName': !empty(travellerData.firstName) ?  travellerData.firstName : '',
            'lastName': !empty(travellerData.lastName) ? travellerData.lastName : '',
            'fromProfile' : !empty(travellerData.fromProfile) ? travellerData.fromProfile : false,
            'oobRequest': {'id': !empty(flowVariables.oobRequest) ? flowVariables.oobRequest : !empty(queryParams.isCopy) && queryParams.isCopy ?  createOOBRequest.id : queryParams.oobRequest },
            'airline' : !empty(travellerData.airline) ? travellerData.airline : '',
            'assignedVehicle' : !empty(travellerData.assignedVehicle) ? travellerData.assignedVehicle : '',
            'otherTransport' : !empty(travellerData.otherTransport) ? travellerData.otherTransport : '',
            'addToOOBProfile': !empty(travellerData.addToOOBProfile) ? travellerData.addToOOBProfile : '',
            'transportNumber' : !empty(travellerData.transportNumber) ? travellerData.transportNumber : '',
            'carDetails' : !empty(travellerData.carDetails) ? travellerData.carDetails : '',
            'departureTime' : !empty(travellerData.departureTime) ? travellerData.departureTime : '',
            'arrivalTime' : !empty(travellerData.arrivalTime) ? travellerData.arrivalTime : ''
            });
        }
      }

         var TravellerArray = {'data' : addAccompanyingTraveller}
         return TravellerArray;
     }

    var getAccompanyingTravellers = function(){
        var addAccompanyingTraveller = [];
        for (var members : accompanyignTravellersGrid.getRows()) {
            addAccompanyingTraveller.add({'id': members.accompanyingMemberCol.childrenMap.accompanyingMemberID.value});
        }
        return addAccompanyingTraveller;
    }

    var getPTGridData = function(isEdit){
      var updatePersonalTimeOff =[];
      var createPersonalTimeOff = [];
      var gridRows = personalTimeGrid.getRows();

      for (var personalTimeOff : personalTimeGrid.getRows()) {
        var columnPath = personalTimeOff.childrenMap;
        var idValue = columnPath.workerTimeOffCol.childrenMap.personalTimeOffWID.value;
        var workerWidget = columnPath.workerTimeOffCol.childrenMap.personalTimeOffWorker;
        var typeWidget =  columnPath.absenceTypeCol ;
        var startDateWidget = columnPath.startDateCol;
        var endDateWidget = columnPath.endDateCol;
        var oobRequestID = !empty(flowVariables.oobRequest) ? flowVariables.oobRequest : !empty(queryParams.isCopy) && queryParams.isCopy ?  createOOBRequest.id : queryParams.oobRequest;

        if(!empty(idValue) && workerWidget.selectedEntries[0].id && (workerWidget.isUpdated() || typeWidget.isUpdated() || startDateWidget.isUpdated() || endDateWidget.isUpdated())){
          updatePersonalTimeOff.add({
            'id': !empty(idValue) ? idValue : '',
            'worker': !empty(workerWidget.selectedEntries[0].id) ? {'id' : workerWidget.selectedEntries[0].id} : '',
            'oobRequest': !empty(oobRequestID) ? {'id' : oobRequestID} : '' ,
            'type': !empty(typeWidget.selectedEntries[0]) ? typeWidget.selectedEntries[0].descriptor : '',
            'startDate': !empty(startDateWidget.value) ? startDateWidget.value.format('yyyy-MM-dd') : '',
            'endDate': !empty(endDateWidget.value) ? endDateWidget.value.format('yyyy-MM-dd') : ''
          });
        }else if(empty(idValue) && workerWidget.selectedEntries[0].id){
          createPersonalTimeOff.add({
            'worker': !empty(workerWidget.selectedEntries[0].id) ? {'id' : workerWidget.selectedEntries[0].id} : '',
            'oobRequest': !empty(oobRequestID) ? {'id' : oobRequestID} : '' ,
            'type': !empty(typeWidget.selectedEntries[0]) ? typeWidget.selectedEntries[0].descriptor : '',
            'startDate': !empty(startDateWidget.value) ? startDateWidget.value.format('yyyy-MM-dd') : '',
            'endDate': !empty(endDateWidget.value) ? endDateWidget.value.format('yyyy-MM-dd') : ''
          });
        }else if(!empty(idValue) && workerWidget.selectedEntries[0].id && empty(flowVariables.oobRequest) && !empty(queryParams.isCopy) && queryParams.isCopy){
             createPersonalTimeOff.add({
             'worker': !empty(workerWidget.selectedEntries[0].id) ? {'id' : workerWidget.selectedEntries[0].id} : '',
             'oobRequest': !empty(oobRequestID) ? {'id' : oobRequestID} : '' ,
             'type': !empty(typeWidget.selectedEntries[0]) ? typeWidget.selectedEntries[0].descriptor : '',
             'startDate': !empty(startDateWidget.value) ? startDateWidget.value.format('yyyy-MM-dd') : '',
             'endDate': !empty(endDateWidget.value) ? endDateWidget.value.format('yyyy-MM-dd') : ''
             });
             }
      }
      return isEdit ? updatePersonalTimeOff : createPersonalTimeOff;
    }

    var getPhoneData = function (isEdit, addToOOBRequest){
      var updatePhoneNumbers =[];
      var createPhoneNumbers = [];
      var allGridNumbers = []
      var gridRows = allNumbers.getRows();

      for (var otherNumbers : gridRows) {
        var columnPath = otherNumbers.childrenMap;
        var newRow = columnPath.NameCol.childrenMap.isNewNumber.value;
        var idValue = !empty(columnPath.NameCol.childrenMap.numberId.value) ? columnPath.NameCol.childrenMap.numberId.value : '';
        var nameWidget = columnPath.phoneNameCol;
        var countryCodeWidget =  columnPath.countryCodeCol ;
        var PhoneNumberWidget = columnPath.phoneNumberCol;
        var NotesWidget = columnPath.notesCol;
        var oobProfileID = !empty(getOOBProfileWQL.data[0].id) ? {'id' : getOOBProfileWQL.data[0].id} : '';

        if(!newRow && idValue !='other' && (nameWidget.isUpdated() || countryCodeWidget.isUpdated() || PhoneNumberWidget.isUpdated() || NotesWidget.isUpdated())){
          updatePhoneNumbers.add({
            'id': idValue,
            'name': !empty(nameWidget.value) ? nameWidget.value : '',
            'countryCode': !empty(countryCodeWidget.selectedEntries[0]) ? countryCodeWidget.selectedEntries[0].id : '',
            'number': !empty(PhoneNumberWidget.value) ? PhoneNumberWidget.value : '' ,
            'notes': !empty(NotesWidget.value) ? NotesWidget.value : '',
            'oobProfile': oobProfileID
        });
          allGridNumbers.add({'id': idValue});
        } else if( newRow && columnPath.NameCol.childrenMap.nameCell.selectedEntries[0]){
            createPhoneNumbers.add({
              'name': !empty(nameWidget.value) ? nameWidget.value : '',
              'countryCode': !empty(countryCodeWidget.selectedEntries[0]) ? countryCodeWidget.selectedEntries[0].id : '',
              'number': !empty(PhoneNumberWidget.value) ? PhoneNumberWidget.value : '' ,
              'notes': !empty(NotesWidget.value) ? NotesWidget.value : '',
              'oobProfile': oobProfileID
            });
        }else if ( !newRow && idValue !='other' && empty(flowVariables.oobRequest) && !empty(queryParams.isCopy) && queryParams.isCopy){
          createPhoneNumbers.add({
            'name': !empty(nameWidget.value) ? nameWidget.value : '',
            'countryCode': !empty(countryCodeWidget.selectedEntries[0]) ? countryCodeWidget.selectedEntries[0].id : '',
            'number': !empty(PhoneNumberWidget.value) ? PhoneNumberWidget.value : '' ,
            'notes': !empty(NotesWidget.value) ? NotesWidget.value : '',
            'oobProfile': oobProfileID
          });
        }else if ( !newRow && idValue !='other'){
            allGridNumbers.add({'id': idValue});
        }
      }
        return isEdit ? updatePhoneNumbers : addToOOBRequest ? allGridNumbers : createPhoneNumbers;
    }

  var removeGridRows = function(widget) {
    var totalRows = widget.getRows().size() - 1;
      var index = totalRows;
    while (index >= 0){
      widget.removeRow(index);
      index = index - 1;
    }
  }

  %>",
  "presentation": {
    "headerSize": "VPS_DEFAULT",
    "pageType": "edit",
    "title": {
      "type": "title",
      "label": "Workday Extend"
    },
    "body": {
      "type": "section",
      "horizontal": false,
      "children": [
        {
          "type": "fieldSet",
          "id": "noProfile",
          "render": "<% !pageVariables.hasOOBProfile %>",
          "children": [
            {
              "type": "text",
              "label": "Please create an OOB Profile",
              "id": "pleaseCreateAnOobProfileTxt",
              "required": false,
              "enabled": false,
              "value": "You will need to create an OOB profile before you can create OOB requests. Please navigate back to the OOB home page and create a Profile."
            },
            {
              "type": "editButtonBar",
              "editButtons": [
                {
                  "type": "editButton",
                  "label": "<% 'Next' %>",
                  "buttonType": "PRIMARY",
                  "sortOrder": "a",
                  "visible": false,
                  "id": "nextBtn"
                }
              ]
            }
          ]
        },
        {
          "type": "fieldSet",
          "id": "createOOBForm",
          "render": "<% pageVariables.hasOOBProfile %>",
          "children": [
            {
              "type": "fieldSet",
              "id": "tripDetailsFS",
              "title": "Trip Details",
              "collapsible": true,
              "children": [
                {
                  "type": "checkBox",
                  "label": "Have you run a diagnostics check and verified that Vismo is running properly on your device?",
                  "id": "vismoChbx",
                  "required": true,
                  "enabled": true,
                  "trueLabel": "True Label",
                  "falseLabel": "False Label",
                  "value": true,
                  "onChange": "<% test1Txt.setValue(destinationsToDelete()); %>"
                },
                {
                  "type": "text",
                  "label": "Trip Name",
                  "id": "tripNameTxt",
                  "required": true,
                  "enabled": true,
                  "value": "<% !empty(getOOBRequest.data) ? getOOBRequest.data[0].name : '' %>"
                },
                {
                  "type": "textArea",
                  "label": "Trip Purpose",
                  "id": "tripPurposeTxtA",
                  "required": true,
                  "enabled": true,
                  "value": "<% !empty(getOOBRequest.data) ? getOOBRequest.data[0].purpose : '' %>"
                },
                {
                  "type": "date",
                  "label": "Start Date",
                  "id": "startDateDt",
                  "required": true,
                  "enabled": true,
                  "value": "<% OOB.getCurrentTime() %>"
                },
                {
                  "type": "date",
                  "label": "End Date (or Expected End Date)",
                  "id": "endDateDt",
                  "required": true,
                  "enabled": true,
                  "value": "<% OOB.getCurrentTime() %>"
                },
                {
                  "type": "checkBox",
                  "label": "End Date is an Expected End Date",
                  "id": "endDateChbx",
                  "required": true,
                  "enabled": true,
                  "trueLabel": "True Label",
                  "falseLabel": "False Label",
                  "value": "<% true %>"
                },
                {
                  "type": "instanceList",
                  "label": "STS",
                  "id": "stsIL",
                  "required": true,
                  "enabled": true,
                  "values": "<% !empty(OOB.getSTS()) ? OOB.getSTS() : [] %>",
                  "selectedValuesAndDescriptors": "<% !empty(getOOBRequest.data[0].sts) ? [OOB.getSTS().find(i => {i.descriptor == getOOBRequest.data[0].sts})] : [] %>",
                  "onChange": "<%
                     if(!empty(self.selectedEntries) && self.selectedEntries[0].id == 'other'){
                       otherStsTxt.setVisible(true);
                     }else{
                       otherStsTxt.setVisible(false);
                       otherStsTxt.setValue('');
                     }
                  %>"
                },
                {
                  "type": "text",
                  "label": "Other - STS specific to this Trip",
                  "id": "otherStsTxt",
                  "required": false,
                  "enabled": true,
                  "visible": "<% !empty(getOOBRequest.data[0].otherSTS) %>",
                  "value": "<% !empty(getOOBRequest.data) ? getOOBRequest.data[0].otherSTS : '' %>"
                }
              ]
            },
            {
              "type": "fieldSet",
              "title": "Accompanying Travelers included in OOB",
              "id": "travelDetailsFS",
              "collapsible": true,
              "children": [
                {
                  "type": "text",
                  "label": "Removing Accompanying Travellers",
                  "id": "removingAccompanyingTravellersTxt",
                  "required": false,
                  "enabled": false,
                  "visible": "<% !empty(getAccompanyTravllers.data) %>",
                  "value": "Please navigate to the next page to remove accompanying travellers"
                },
                {
                  "type": "grid",
                  "rows": "<% !empty(getAccompanyTravllers.data) ? getAccompanyTravllers.data : [] %>",
                  "id": "accompanyignTravellersGrid",
                  "doNotAdd": true,
                  "doNotRemove": true,
                  "deleteEndPoint": "deleteAccompanyingTravellers",
                  "rowVariableName": "accompanyingMemberData",
                  "label": "<% 'Accompanying Travellers Grid' %>",
                  "onRowRemove": "<% setMembersGrid(); %>",
                  "visible": "<% !empty(getAccompanyTravllers.data) %>",
                  "columns": [
                    {
                      "type": "column",
                      "columnId": "accompanyingMemberCol",
                      "label": "<% 'Accompanying Individuals Traveling ' %>",
                      "cellTemplate": {
                        "type": "fieldSet",
                        "children": [
                          {
                            "type": "text",
                            "id": "accompanyingMemberName",
                            "enabled": false,
                            "value": "<% (accompanyingMemberData.firstName ?: '') + ' ' + (accompanyingMemberData.lastName ?: '') + (!empty(accompanyingMemberData.departureDate) && !empty(accompanyingMemberData.arrivalDate) ? (' (' +  (accompanyingMemberData.departureDate ?: '') + ' to ' + (accompanyingMemberData.arrivalDate ?: '') + ')') : '') %>"
                          },
                          {
                            "type": "hidden",
                            "id": "accompanyingMemberID",
                            "value": "<% accompanyingMemberData.id %>"
                          },
                          {
                            "type": "hidden",
                            "id": "accompanyingMemberFullName",
                            "value": "<% (accompanyingMemberData.firstName ?: '') + ' ' + (accompanyingMemberData.lastName ?: '') %>"
                          }
                        ]
                      }
                    },
                    {
                      "type": "column",
                      "columnId": "addToOOBCol",
                      "label": "<% 'Add to OOB profile? ' %>",
                      "cellTemplate": {
                        "type": "checkBox",
                        "value": "<% accompanyingMemberData.addToOOBProfile %>",
                        "enabled": false
                      }
                    }
                  ]
                },
                {
                  "type": "fieldSet",
                  "children": [
                    {
                      "type": "grid",
                      "id": "fieldMemberGrid",
                      "rows": "<% !empty(pageVariables.frequentTravellers) ?  pageVariables.frequentTravellers : [] %>",
                      "render": "<% pageVariables.isField %>",
                      "selectionEnabled": true,
                      "onRowSelect": "<% childrenArrangments() %>",
                      "rowVariableName": "fieldMemberData",
                      "isArrayOutBinding": true,
                      "_rowSelected": "<% !empty(pageVariables.frequentTravellersWIDs) && pageVariables.frequentTravellersWIDs[0].containsValue(fieldMemberData.id)  %>",
                      "label": "<% 'For Field Family Members' %>",
                      "columns": [
                        {
                          "type": "column",
                          "columnId": "familyMemberCol",
                          "label": "<% 'Members of Family Unit or Frequent Travelers from OOB Profile' %>",
                          "cellTemplate": {
                            "type": "fieldSet",
                            "children": [
                              {
                                "id": "worker",
                                "type": "text",
                                "value": "<% !empty(fieldMemberData.name) ? fieldMemberData.name : '' %>",
                                "enabled": false,
                                "valuesOut": [
                                  {
                                    "value": "<% (self.value ?: '')  %>"
                                  }
                                ]
                              },
                              {
                                "type": "hidden",
                                "id": "staffId",
                                "value": "<% !empty(fieldMemberData.id) ? fieldMemberData.id : '' %>"
                              },
                              {
                                "type": "hidden",
                                "id": "relationship",
                                "value": "<% !empty(fieldMemberData.id) ? fieldMemberData.relationship : '' %>"
                              }
                            ]
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "fieldSet",
                  "render": "<% !pageVariables.isField %>",
                  "children": [
                    {
                      "type": "grid",
                      "id": "staffMemberGrid",
                      "rows": "<% !empty(pageVariables.frequentTravellers) ? pageVariables.frequentTravellersStaff : [] %>",
                      "rowVariableName": "staffMemberData",
                      "render": "<% !pageVariables.isField %>",
                      "selectionEnabled": true,
                      "label": "<% 'For Staff Members' %>",
                      "columns": [
                        {
                          "type": "column",
                          "columnId": "staffMemberCol",
                          "label": "<% 'Travelers (yourself plus Frequent Travelers from OOB Profile)' %>",
                          "cellTemplate": {
                            "type": "fieldSet",
                            "children": [
                              {
                                "type": "text",
                                "id": "staffMemberName",
                                "value": "<% staffMemberData.name %>",
                                "enabled": false
                              },
                              {
                                "type": "hidden",
                                "id": "StaffId",
                                "value": "<% staffMemberData.id %>"
                              }
                            ]
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "richText",
                  "label": "Alternative arrangements for Dependent Children ",
                  "id": "AlternativeRTxt",
                  "required": false,
                  "visible": "<% pageVariables.isField && pageVariables.hasChildren %>",
                  "enabled": false,
                  "render": false
                },
                {
                  "type": "textArea",
                  "id": "alternativeTxtA",
                  "label": "Please describe the arrangements for your dependent children who are not traveling with you.   Please include addresses, caregiver contact information, etc.",
                  "required": "<% pageVariables.isField && pageVariables.hasChildren %>",
                  "enabled": true,
                  "visible": "<% pageVariables.isField && pageVariables.hasChildren %>",
                  "render": false,
                  "value": ""
                },
                {
                  "type": "checkBox",
                  "label": "Other individuals (not list above) that will be traveling",
                  "id": "otherIndividualsChbx",
                  "required": false,
                  "enabled": true,
                  "visible": true,
                  "onChange": "<%
                    self.value ? OtherMemberGrid.setVisible(true) : OtherMemberGrid.setVisible(false) ;
                    self.value == false ? removeGridRows(OtherMemberGrid) : '' ;
                  %>"
                },
                {
                  "type": "grid",
                  "rows": "<% [] %>",
                  "id": "OtherMemberGrid",
                  "rowVariableName": "otherMemberData",
                  "label": "<% 'For Other Members' %>",
                  "visible": "<% false %>",
                  "columns": [
                    {
                      "type": "column",
                      "columnId": "otherMemberCol",
                      "label": "<% 'Other Individuals Traveling ' %>",
                      "cellTemplate": {
                        "type": "text",
                        "enabled": true
                      }
                    },
                    {
                      "type": "column",
                      "columnId": "addToOOBCol",
                      "label": "<% 'Add to OOB profile? ' %>",
                      "cellTemplate": {
                        "type": "checkBox",
                        "enabled": true
                      }
                    }
                  ]
                },
                {
                  "type": "grid",
                  "rows": "<% !empty(getOOBRequest.data[0] &&!empty(getOOBRequest.data[0].phoneNumbers)) ?  getOOBRequest.data.map(x => {x.phoneNumbers})[0] : [] %>",
                  "id": "allNumbers",
                  "deleteEndPoint": "deletePhoneNumber",
                  "rowVariableName": "contactDetailsData",
                  "onRowAdd": "<%
                               var selfRows = self.getRows();
                               var newRow = selfRows[0];
                    newRow.childrenMap.NameCol.childrenMap.isNewNumber.setValue(true);
                  %>",
                  "label": "<% 'Phone Numbers you are travelling with' %>",
                  "columns": [
                    {
                      "type": "column",
                      "columnId": "NameCol",
                      "label": "<% 'Name' %>",
                      "cellTemplate": {
                        "type": "fieldSet",
                        "children": [
                          {
                            "type": "instanceList",
                            "id": "nameCell",
                            "displayKey": "name",
                            "required": true,
                            "values": "<% pageVariables.phoneNumbers ?: [] %>",
                            "selectedValuesAndDescriptors": "<% !empty(contactDetailsData.id) && !empty(contactDetailsData.name) ? [{'id' :contactDetailsData.id, 'name' : contactDetailsData.name}] : [] %>",
                            "onChange": "<%
                              if(!empty(self.selectedEntries[0]) && self.selectedEntries[0].id != 'other'){
                                numberName.value = self.selectedEntries[0].descriptor;
                                numberId.value = self.selectedEntries[0].id;
                                numberName.value = self.selectedEntries[0].descriptor;
                                phoneNameCell.value = self.selectedEntries[0].descriptor;
                                phoneNumberCol.value = regex:replace(self.selectedEntries[0].descriptor, '[^0-9.]', '');
                                phoneNameCell.enabled=false;
                              }else if(!empty(self.selectedEntries[0]) && self.selectedEntries[0].id == 'other'){
                                numberId.value = 'other';
                                phoneNameCell.value = '';
                                phoneCodeList.setValue([]);
                                phoneNumberCol.value = '';
                                phoneNameCell.enabled=true;
                                notesCol.value = '';
                              }
                              else{
                                numberId.value = '';
                                numberName.value = '';
                                phoneCodeList.setValue([]);
                                phoneNumberCol.value = '';
                                notesCol.value = '';
                                phoneNameCell.value = '';
                                phoneNameCell.enabled=false;
                              }
                            %>"
                          },
                          {
                            "type": "hidden",
                            "id": "numberName",
                            "value": ""
                          },
                          {
                            "type": "hidden",
                            "id": "numberId",
                            "value": "<%!empty(contactDetailsData.id) ? contactDetailsData.id : ''%>"
                          },
                          {
                            "type": "hidden",
                            "id": "isNewNumber",
                            "value": "<% false %>"
                          }
                        ]
                      }
                    },
                    {
                      "type": "column",
                      "columnId": "phoneNameCol",
                      "label": "<% 'Name' %>",
                      "cellTemplate": {
                        "type": "text",
                        "id": "phoneNameCell",
                        "enabled": "<% true %>",
                        "required": true,
                        "value": "<%!empty(contactDetailsData.name) ? contactDetailsData.name : ''%>"
                      }
                    },
                    {
                      "type": "column",
                      "columnId": "countryCodeCol",
                      "label": "<% 'Country Phone Code' %>",
                      "cellTemplate": {
                        "type": "instanceList",
                        "id": "phoneCodeList",
                        "selectedValuesAndDescriptors": "<% !empty(contactDetailsData.countryCode) ? [{'phoneCode' : contactDetailsData.countryCode, 'phoneCode' : contactDetailsData.countryCode}] : [] %>",
                        "values": "<% [] %>",
                        "searchEndPoint": "<% endpoints.getPhoneCodes %>",
                        "searchResultValues": "<% getPhoneCodes.items.distinct() %>",
                        "idKey": "phoneCode",
                        "displayKey": "phoneCode",
                        "multiSelect": false
                      }
                    },
                    {
                      "type": "column",
                      "columnId": "phoneNumberCol",
                      "label": "<% 'Phone Number' %>",
                      "cellTemplate": {
                        "type": "text",
                        "id": "phoneNumberCol",
                        "value": "<%!empty(contactDetailsData.number) ? contactDetailsData.number : ''%>",
                        "required": true,
                        "onChange": "<%
                          self.clearError();
                          if(!empty(self.value) && !regex:match(self.value, '[0-9]+')) {
                            self.setError('Only numbers allowed');
                          }
                        %>"
                      }
                    },
                    {
                      "type": "column",
                      "columnId": "notesCol",
                      "label": "<% 'Notes' %>",
                      "cellTemplate": {
                        "type": "text",
                        "id": "notesCol",
                        "value": "<%!empty(contactDetailsData.notes) ? contactDetailsData.notes : ''%>"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "type": "fieldSet",
              "render": "<% empty(getWorkerDetails.data[0].workerIsContingentWorker) %>",
              "id": "personalTimeFS",
              "title": "Personal Time",
              "collapsible": true,
              "children": [
                {
                  "type": "richText",
                  "id": "personalTimeRTxt",
                  "required": false,
                  "enabled": false,
                  "value": "Please specify the date(s) and time off type for your personal time.  Upon submission of this OOB the time off requests will be created for you."
                },
                {
                  "type": "radioGroup",
                  "label": "Trip includes Vacation, Bereavement or Holiday days",
                  "id": "PersonalLeaveRG",
                  "required": true,
                  "instanceList": [
                    {
                      "id": "yes",
                      "descriptor": "Yes"
                    },
                    {
                      "id": "no",
                      "descriptor": "No"
                    }
                  ],
                  "selectedValues": "<% !empty(getPersonalTimeOff.data) ? ['yes'] : ['no'] %>",
                  "onChange": "<%
                    self.value == ['yes'] ? personalTimeGrid.setVisible(true) : personalTimeGrid.setVisible(false);
                    self.value == ['yes'] ? removeGridRows(personalTimeGrid) : '' ;
                  %>"
                },
                {
                  "type": "grid",
                  "id": "personalTimeGrid",
                  "rows": "<% !empty(getPersonalTimeOff.data) ? getPersonalTimeOff.data : [] %>",
                  "visible": "<% !empty(getPersonalTimeOff.data) %>",
                  "isArrayOutBinding": "true",
                  "rowVariableName": "timeOffData",
                  "deleteEndPoint": "deletePersonalTimeOff",
                  "label": "<% 'Personal Time Off Details' %>",
                  "columns": [
                    {
                      "type": "column",
                      "columnId": "workerTimeOffCol",
                      "label": "<% 'Workers taking time off' %>",
                      "cellTemplate": {
                        "type": "fieldSet",
                        "children": [
                          {
                            "type": "instanceList",
                            "id": "personalTimeOffWorker",
                            "values": "<%  !pageVariables.isField ? getWorkerDetails.data.map(x => {x.worker}) : !empty(getWorkerFromSameUnit.data) ? getWorkerFromSameUnit.data.map(result => {result.worker}) : [] %>",
                            "enabled": true,
                            "selectedValuesAndDescriptors": "<% !empty(timeOffData.worker) ? [timeOffData.worker] : []  %>"
                          },
                          {
                            "type": "hidden",
                            "id": "personalTimeOffWID",
                            "value": "<%!empty(timeOffData.id) ? timeOffData.id : ''%>"
                          }
                        ]
                      }
                    },
                    {
                      "type": "column",
                      "columnId": "absenceTypeCol",
                      "label": "<% 'Absence Type' %>",
                      "cellTemplate": {
                        "type": "instanceList",
                        "id": "absenceTypeIL",
                        "values": "<% !empty(getTimeOffTypes.data) ? getTimeOffTypes.data.map(result => {result.timeOffType}) : [] %>",
                        "_selectedValues": "<% [pageVariables.TimeOffTypes.find(x => {x.descriptor == timeOffData.type}).id]  %>",
                        "selectedValuesAndDescriptors": "<%
                          var data = getTimeOffTypes.data.map(result => {result.timeOffType});
                          var field = data.find(x => {x.descriptor == timeOffData.leaveType});
                          return ! empty(field) ? [field] : [];
                        %>"
                      }
                    },
                    {
                      "type": "column",
                      "columnId": "startDateCol",
                      "label": "<% 'Start Date' %>",
                      "cellTemplate": {
                        "type": "date",
                        "value": "<% !empty(timeOffData.startDate) ? timeOffData.startDate : '' %>",
                        "enabled": true
                      }
                    },
                    {
                      "type": "column",
                      "columnId": "endDateCol",
                      "label": "<% 'End Date' %>",
                      "cellTemplate": {
                        "type": "date",
                        "value": "<% !empty(timeOffData.endDate) ? timeOffData.endDate : '' %>",
                        "enabled": true
                      }
                    }
                  ]
                }
              ]
            },
            {
              "type": "fieldSet",
              "title": "Elevated Risk",
              "id": "elevatedRiskFS",
              "collapsible": true,
              "children": [
                {
                  "type": "radioGroup",
                  "label": "Is this an Elevated Risk Situation",
                  "id": "elevatedRiskRG",
                  "required": true,
                  "instanceList": [
                    {
                      "id": "yes",
                      "descriptor": "Yes"
                    },
                    {
                      "id": "no",
                      "descriptor": "No"
                    }
                  ],
                  "selectedValues": "<% !empty(getOOBRequest.data) && getOOBRequest.data[0].elevatedRisk ? ['yes'] : ['no'] %>",
                  "onChange": "<%
                    self.value == ['yes'] ? elevatedRiskTxtA.setVisible(true) : elevatedRiskTxtA.setVisible(false);
                    elevatedRiskTxtA.setValue('');
                  %>"
                },
                {
                  "type": "textArea",
                  "label": "As this is an Elevated Risk Situation, state who you will make scheduled contact with upon departure, arrival and return; what the contact frequency will be and what form the contact will take – cell phone, radio frequency, VOIP Phone, etc.)",
                  "id": "elevatedRiskTxtA",
                  "required": false,
                  "enabled": true,
                  "value": "<% !empty(getOOBRequest.data) && !empty(getOOBRequest.data[0].elevatedRiskSituation) ? getOOBRequest.data[0].elevatedRiskSituation : '' %>",
                  "visible": "<% !empty(getOOBRequest.data) && !empty(getOOBRequest.data[0].elevatedRiskSituation) %>"
                },
                {
                  "type": "textArea",
                  "label": "Comments can be entered here for this OOB.  NOTE that these are not private comments and are visible to others who have access to view this OOB.",
                  "id": "addCommentsOnBehalfOfTxtA",
                  "render": "<% !pageVariables.isField %>",
                  "required": false,
                  "enabled": true,
                  "visible": "<% !empty(getOOBRequest.data) && !empty(getOOBRequest.data[0].initiatorComments) %>",
                  "value": "<% !empty(getOOBRequest.data) && !empty(getOOBRequest.data[0].initiatorComments) ? getOOBRequest.data[0].initiatorComments : '' %>"
                }
              ]
            },
            {
              "type": "editButtonBar",
              "editButtons": [
                {
                  "type": "editButton",
                  "label": "<% 'Next' %>",
                  "buttonType": "PRIMARY",
                  "sortOrder": "a",
                  "id": "nextBtn"
                },
                {
                  "type": "editButton",
                  "label": "<% 'Save For Later' %>",
                  "id": "saveForLaterBtn",
                  "sortOrder": "b",
                  "buttonType": "AUXILIARY"
                }
              ]
            }
          ]
        }
      ]
    }
  }
}