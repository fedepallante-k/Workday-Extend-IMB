{
  "id": "createOOBRequest-b-TravelLodgingDetails",
  "endPoints": [
    {
      "name": "getCurrentWorker",
      "baseUrlType": "WORKDAY-COMMON",
      "url": "/workers/me",
      "authType": "sso"
    },
    {
      "name": "getOOBProfile",
      "baseUrlType": "APP-V1",
      "url": "/oobProfiles",
      "authType": "sso"
    },
    {
      "name": "getOOBRequest",
      "baseUrlType": "WORKDAY-WQL",
      "exclude": "<% empty(flowVariables.oobRequest) %>",
      "url": "<% '/data?query=' + ('SELECT workdayID AS id, createdMoment, OOBRequest, name, purpose, startDate, expectedEndDate, endDate, sts, otherSTS, alternateArrangementForChildren, elevatedRisk, elevatedRiskSituation, initiatorComments, traveller, status, affinity, phoneNumbers{workdayID AS id, name, number, countryCode, notes} as phoneNumbers, accompanyingTravellers{firstName, lastName, fromProfile} as accompanyingTravellers, lodging{startDate, endDate, name, countryCode, addressLine1, addressLine2, addressLine3, city, state, contactNumber,travellerName, postalCode} as lodging, travellerNames, otherTravellerNames FROM outOfBed_sykqld_oobRequests WHERE workdayID in (\"' + (!empty(flowVariables.oobRequest) ? flowVariables.oobRequest : '') +'\") ORDER BY createdMoment DESC').urlEncode() %>",
      "authType": "wcpisu"
    },
    {
      "name": "getAccompanyTravllers",
      "baseUrlType": "WORKDAY-WQL",
      "exclude": "<% empty( flowVariables.oobRequest )%>",
      "url": "<% '/data?query=' + ('SELECT workdayID AS id, sts, departureDate, arrivalDate, modeOfTransport, departurePoint, arrivalPoint, firstName, lastName, fromProfile, addToOOBProfile, airline, assignedVehicle, otherTransport, transportNumber, carDetails, departureTime, arrivalTime, travellerNames FROM outOfBed_sykqld_accompanyingTravellers WHERE oobRequest in ('+  flowVariables.oobRequest + ') ORDER BY createdMoment DESC').urlEncode() %>",
      "authType": "wcpisu"
    },
    {
      "name": "getLodging",
      "url": "<% 'https://api.workday.com/wql/v1/data?query=' + ('SELECT favouriteDestinations{workdayID as id, name as descriptor, countryCode, addressLine1, addressLine2, addressLine3, city, state, postalCode, contactNumber} as favouriteDestinations FROM outOfBed_sykqld_oobProfiles where worker in (\\'' + getCurrentWorker.id + '\\')').urlEncode() %>",
      "authType": "wcpisu",
      "httpMethod": "GET"
    },
    {
      "name": "getCountrySearch",
      "baseUrlType": "WORKDAY-WQL",
      "url": "<% '/data?query=' + ('SELECT workdayID, countryName AS descriptor, alpha_3Code AS id FROM countries WHERE countryName CONTAINS \"' + instanceListQuery.replace('+',' ') + '\"').urlEncode() %>",
      "authType": "wcpisu",
      "exclude": "<% empty instanceListQuery %>",
      "deferred": true
    },
    {
      "name": "getCountry",
      "baseUrlType": "WORKDAY-WQL",
      "url": "<% '/data?query=' + ('SELECT workdayID, countryName AS descriptor, alpha_3Code AS id FROM countries').urlEncode() %>",
      "authType": "wcpisu"
    },
    {
      "name": "getDestinations",
      "baseUrlType": "WORKDAY-WQL",
      "exclude": "<%empty(flowVariables.oobRequest)%>",
      "url": "<% '/data?query=' + ('SELECT createdMoment, workdayID AS id, travellerName, Destination, name AS descriptor, countryCode, addressLine1, addressLine2, addressLine3, city, state, postalCode, contactNumber, other, startDate, endDate, addToProfile, oobRequest{workdayID} as oobRequest FROM outOfBed_sykqld_destinations WHERE ON oobRequest workdayID = \\''+  flowVariables.oobRequest + '\\' WHERE oobRequest is not empty ORDER BY createdMoment DESC').urlEncode() %>",
      "authType": "wcpisu"
    },
    {
      "name": "getDestinationsOnProfileOLD",
      "baseUrlType": "WORKDAY-WQL",
      "exclude": "<%empty(flowVariables.oobRequest)%>",
      "url": "<% '/data?query=' + ('SELECT workdayID AS id, name AS descriptor FROM outOfBed_sykqld_destinations WHERE ON oobRequest workdayID = \\''+  flowVariables.oobRequest + '\\' WHERE oobRequest is not empty AND addToProfile = true ORDER BY createdMoment DESC').urlEncode() %>",
      "authType": "wcpisu"
    },
    {
      "name": "getDestinationsOnProfile",
      "baseUrlType": "WORKDAY-WQL",
      "exclude": "<% empty(flowVariables.oobProfileID) %>",
      "url": "<% '/data?query=' + ('SELECT workdayID AS id, name AS descriptor,travellerName, Destination, countryCode, addressLine1, addressLine2, addressLine3, city, state, postalCode, contactNumber, other, startDate, endDate, addToProfile, oobRequest{workdayID} as oobRequest FROM outOfBed_sykqld_destinations WHERE ON oobProfile workdayID = \\''+  flowVariables.oobProfileID + '\\' WHERE oobProfile is not empty AND addToProfile = true ORDER BY createdMoment DESC').urlEncode() %>",
      "authType": "wcpisu"
    }
  ],
  "outboundData": {
    "outboundEndPoints": [
      {
        "name": "createDestinations",
        "url": "<% `https://api.workday.com/apps/outOfBed_sykqld/v1/destinations?bulk=true` %>",
        "authType": "wcpisu",
        "httpMethod": "POST",
        "exclude": "<% !empty(destinationID.value) || (!empty(backBtn.value) && backBtn.value == true) %>",
        "onSend": "<%
          return self.data;
        %>",
        "failOnStatusCodes": [
          {
            "code": 400
          },
          {
            "code": 403
          }
        ]
      },
      {
        "name": "updateDestinations",
        "url": "<% `https://api.workday.com/apps/outOfBed_sykqld/v1/destinations?bulk=true` %>",
        "authType": "wcpisu",
        "httpMethod": "PATCH",
        "exclude": "<% empty(destinationID.value) || (!empty(backBtn.value) && backBtn.value == true) %>",
        "onSend": "<%
          return self.data;
        %>",
        "failOnStatusCodes": [
          {
            "code": 400
          },
          {
            "code": 403
          }
        ]
      },
      {
        "name": "createAccompanyingTravellers",
        "url": "<% `https://api.workday.com/apps/outOfBed_sykqld/v1/accompanyingTravellers?bulk=true` %>",
        "authType": "wcpisu",
        "httpMethod": "POST",
        "exclude": "<% !empty(accompanyTravellerID.value) || (!empty(backBtn.value) && backBtn.value == true) %>",
        "onSend": "<%
          return self.data;
        %>",
        "failOnStatusCodes": [
          {
            "code": 400
          },
          {
            "code": 403
          }
        ]
      },
      {
        "name": "updateAccompanyingTravellers",
        "url": "<% `https://api.workday.com/apps/outOfBed_sykqld/v1/accompanyingTravellers?bulk=true` %>",
        "authType": "wcpisu",
        "exclude": "<% empty(accompanyTravellerID.value) %>",
        "onSend": "<% return self.data; %>",
        "httpMethod": "PATCH",
        "failOnStatusCodes": [
          {
            "code": 400
          },
          {
            "code": 403
          }
        ]
      },
      {
        "_generationNote": "Updates a single instance, as specified by of the OOBProfile business object resource.",
        "name": "updateOOBProfile",
        "url": "<% 'https://api.workday.com/apps/outOfBed_sykqld/v1/oobProfiles/' + getOOBProfile.data[0].id %>",
        "authType": "wcpisu",
        "httpMethod": "PATCH",
        "_exclude": "<% !empty(backBtn.value) && backBtn.value == true %>",
        "exclude": "<% true %>",
        "failOnStatusCodes": [
          {
            "code": 400
          },
          {
            "code": 403
          }
        ],
        "values": [
          {
            "outboundPath": "favouriteDestinations",
            "value": "<%
              var destinations = [];
              if(!empty(createDestinations.data)){
                for(var x : createDestinations.data){
                  if(x.body.addToProfile){
                    destinations.add({'id' : x.body.id});
                  }
                }
              }
              if(!empty(updateDestinations.data)){
                  for(var x : updateDestinations.data){
                      if(x.body.addToProfile){
                          destinations.add({'id' : x.body.id});
                      }
                  }
              }
              destinations.addAll(getOOBProfile.data[0].favouriteDestinations);
              return destinations;
              %>"
          }
        ]
      },
      {
        "name": "deleteAccompanyingTravellers",
        "url": "<% `https://api.workday.com/apps/outOfBed_sykqld/v1/accompanyingTravellers/` + accompanyTravellerID.value %>",
        "authType": "wcpisu",
        "httpMethod": "DELETE",
        "exclude": "<% empty(accompanyTravellerID.value) || (!empty(backBtn.value) && backBtn.value == true) %>",
        "failOnStatusCodes": [
          {
            "code": 400
          },
          {
            "code": 403
          }
        ]
      },
      {
        "name": "deleteDestinations",
        "url": "<% `https://api.workday.com/apps/outOfBed_sykqld/v1/destinations/` + destinationID.value %>",
        "authType": "wcpisu",
        "httpMethod": "DELETE",
        "exclude": "<% empty(destinationID.value) %>",
        "failOnStatusCodes": [
          {
            "code": 400
          },
          {
            "code": 403
          }
        ]
      },
      {
        "name": "transitionOutboundVars",
        "type": "outboundVariable",
        "variableScope": "flow",
        "values": [
          {
            "outboundPath": "saveForLater",
            "value": "<% !empty(saveForLaterBtn.value) && saveForLaterBtn.value ==true %>"
          },
          {
            "outboundPath": "proceed",
            "value": "<% !empty(nextBtn.value) && nextBtn.value == true %>"
          },
          {
            "outboundPath": "backBtn",
            "value": "<% !empty(backBtn.value) && backBtn.value == true %>"
          }
        ]
      }
    ]
  },
  "include": [
    "OOB.script",
    "Dates.script"
  ],
  "script": "<%
  //Todo May be useful for copy details functionality
    var getTravelDetails = function (travelWidget){
      var travelPayload = {:};
      !empty(travelWidget.accompanyingTravellerId) ?  travelPayload.add('id',  accompanyingTravellerId.value ?: '') : null ;
      //travelPayload.add('isExisting',  travelWidget.isExistingTravller.value);
      //travelPayload.add('id',  travelWidget.travellerId.value ?: '');
      travelPayload.add('descriptor',  travelWidget.travellerName.value ?: '');
      travelPayload.add('sts',  travelWidget.stsValue.value ?: '');
      travelPayload.add('departureDate',  travelWidget.departureDateDt.value ?: '');
      travelPayload.add('arrivalDate',  travelWidget.arrivalDateDt.value ?: '');
      travelPayload.add('modeOfTransport',  travelWidget.modeOfTransportName.value ?: '');
      travelPayload.add('departurePoint', travelWidget.departureAirportTxt.value ?: '');
      travelPayload.add('arrivalPoint', travelWidget.arrivalAirportTxt.value ?: '');
      travelPayload.add('lodging', '');
      travelPayload.add('firstName', '');
      travelPayload.add('lastName', '');
      travelPayload.add('fromProfile', '');
      travelPayload.add('oobRequest',  '');

      travelPayload.add('airline',  travelWidget.airlineTxt.value ?: '');
      travelPayload.add('busNumber',  travelWidget.busNumberTxt.value ?: '');
      travelPayload.add('assignedVehicle',  travelWidget.yourVehicleRG.value ?: '');
      travelPayload.add('carDetails',  travelWidget.giveCarDetailsTxt.value ?: '');
      travelPayload.add('otherTransport',  travelWidget.modeOfTransportOtherTxt.value ?: '');

      return travelPayload;
    }

    var panelInfoOld = function(){
      var travelPayload = {:};
      var travelList = [];
      var counter = 0;
      for(var TravelLodging : travelPanel.getPanels()){
      counter +=1;
        for (var TravelDetails : TravelLodging.getChildren()) {
          var payload = getTravelDetails(TravelDetails);
              travelList.add(payload);
        }
        travelPayload.add('data',travelList);
        return travelPayload;
      }
    }

     var panelInfo = function(){
       var travelPayload = {:};
       var travelList = [];
       var counter = 0;

       for(var x : travelPanel.getPanels()){
         for (var TravelDetails : x.getChildren()) {
           var payload = getTravelDetails(TravelDetails);
           travelList.add(payload);
         }
         counter +=1;
       }

      travelPayload.add('data',travelList);
      return travelPayload;
  }



  var togglewidgets = function(enableWidgets, disableWidgets){
      if(!empty(enableWidgets)){
        for(var x : enableWidgets){
          x.setVisible(true);
          x.setRequired(true);
          //empty(x.value) && empty(x.value[0]) ? '' : !empty(x.value[0]) ? x.setValue([]) : x.setValue('');
              if(!empty(x.label) && x.label.contains('assigned')){
              x.setValue([]);
              }
              else{
                  x.setValue('');
              }
        }
      }
      if(!empty(disableWidgets)){
        for(var x : disableWidgets){
          x.setVisible(false);
          x.setRequired(false);
          //empty(x.value) && empty(x.value[0]) ? '' : !empty(x.value[0]) ? x.setValue([]) : x.setValue('empty');
          if(!empty(x.label) && x.label.contains('assigned')){
              x.setValue([]);
          }
              else{
              x.setValue('empty');
          }
        }
     }
  }

  var getListOfTravellerNames = function (){
    var list = getOOBRequest.data[0].travellerNames.split(',');
    !empty(getOOBRequest.data[0].otherTravellerNames) ? list.addAll(getOOBRequest.data[0].otherTravellerNames.split(',')) : '';

    var listOfNames = [];
      for (var x : list){
        listOfNames.add({'id' : x, 'descriptor': x});
      }
    return listOfNames.distinct();
  }

/*
     TODO - Logic for page
     section to wrap everything so i can iterate on the children to save data
     wrap in loop (loop is invisible)
     loop will iterate on logan
     wrap the below in a section
     create two fieldsets (2 field sets within
     within the fields sets is the two panel lists - travel and Lodging
     when storing the accompanying traveller to the OOB request. Can we have multiple panels per accompany traveller?

     Pass the edit
*/
  %>",
  "onLoad": "<%
    pageVariables.travellerNames  = getListOfTravellerNames();
    pageVariables.lodgingList = !empty(getDestinationsOnProfile.data) ? getDestinationsOnProfile.data.add({'id': 'other', 'descriptor': 'Other'}) : [{'id': 'other', 'descriptor': 'Other'}];
   %>",
  "onSubmit": "<%
  %>",
  "presentation": {
    "headerSize": "VPS_DEFAULT",
    "pageType": "edit",
    "title": {
      "type": "title",
      "label": "Create an OOB"
    },
    "body": {
      "type": "section",
      "horizontal": false,
      "children": [
        {
          "type": "panelList",
          "label": "Travel Events",
          "id": "travelPanel",
          "panels": "<% !empty(getAccompanyTravllers.data) ? getAccompanyTravllers.data : [] %>",
          "isArrayOutBinding": false,
          "deleteEndPoint": "deleteAccompanyingTravellers",
          "panelName": "travelDeatilsPanels",
          "indexVariableName": "travelPanelIndex",
          "onPanelAdd": "<%
            var travelPanels = self.getPanels();
            var newPanel = travelPanels[travelPanels.size() - 1];
            //newPanel.getChildren()[0].firstNameTxt.setValue(travellerFirstNameTxt.value);
            //newPanel.getChildren()[0].lastNameTxt.setValue(travellerLastNameTxt.value);
            //newPanel.getChildren()[0].addToOOBTxt.setValue(travellerAddToOOBTxt.value);
          %>",
          "children": [
            {
              "type": "fieldSet",
              "collapsible": true,
              "id": "travelEventFSID",
              "title": "<% 'Travel Event Details - ' + (!empty(getAccompanyTravllers.data) && !empty(getAccompanyTravllers.data[0].travellerNames) && !empty(travelDeatilsPanels.id) ? getAccompanyTravllers.data.find(x => {x.id == travelDeatilsPanels.id}).travellerNames.replace(',', ', ') : '') %>",
              "children": [
                {
                  "type": "instanceList",
                  "label": "Travelers",
                  "id": "travellersIL",
                  "multiSelect": true,
                  "required": false,
                  "enabled": true,
                  "idKey": "descriptor",
                  "displayKey": "descriptor",
                  "values": "<% !empty(pageVariables.travellerNames) ? pageVariables.travellerNames : [] %>",
                  "selectedValues": "<% !empty(travelDeatilsPanels.id) && !empty(getAccompanyTravllers.data) && !empty(getAccompanyTravllers.data[0].travellerNames)? getAccompanyTravllers.data.find(x => {x.id == travelDeatilsPanels.id}).travellerNames.split(',') : [] %>",
                  "onChange": "<%
                    if(empty(self.getSelectedEntries())){
                      addTravellerNamesTxt.setValue('');
                      travelEventFSID.setTitle('Travel Event Details');
                    }else if(!empty(self.getSelectedEntries())){
                      addTravellerNamesTxt.setValue(travellersIL.getSelectedEntries().map(x => {x.descriptor}).join());
                      travelEventFSID.setTitle('Travel Event Details - ' + self.getSelectedEntries().map(x => {x.descriptor}).join());
                    }
                  %>"
                 },
                {
                  "type": "hidden",
                  "id": "accompanyTravellerID",
                  "value": "<%  !empty(travelDeatilsPanels.id) ? travelDeatilsPanels.id : '' %>",
                  "valuesOut": [
                    {
                      "valueOutBinding": "createAccompanyingTravellers.data[].id",
                      "value": "<% self.value %>"
                    },
                    {
                      "valueOutBinding": "updateAccompanyingTravellers.data[].id",
                      "value": "<% self.value %>"
                    }
                  ]
                },
                {
                  "type": "hidden",
                  "id": "oobRequestID",
                  "value": "<%  !empty(flowVariables.oobRequest) ? flowVariables.oobRequest : '' %>",
                  "valuesOut": [
                    {
                      "valueOutBinding": "createAccompanyingTravellers.data[].oobRequest.id",
                      "value": "<% self.value %>"
                    },
                    {
                      "valueOutBinding": "updateAccompanyingTravellers.data[].oobRequest.id",
                      "value": "<% self.value %>"
                    }
                  ]
                },
                {
                  "type": "hidden",
                  "id": "firstNameTxt",
                  "value": "<% !empty(travelDeatilsPanels.firstName) ? travelDeatilsPanels.firstName : '' %>",
                  "valuesOut": [
                    {
                      "valueOutBinding": "createAccompanyingTravellers.data[].firstName",
                      "value": "<% self.value %>"
                    },
                    {
                      "valueOutBinding": "updateAccompanyingTravellers.data[].firstName",
                      "value": "<% self.value %>"
                    }
                  ]
                },
                {
                  "type": "hidden",
                  "id": "lastNameTxt",
                  "value": "<% !empty(travelDeatilsPanels.lastName) ? travelDeatilsPanels.lastName : '' %>",
                  "valuesOut": [
                    {
                      "valueOutBinding": "createAccompanyingTravellers.data[].lastName",
                      "value": "<% self.value %>"
                    },
                    {
                      "valueOutBinding": "updateAccompanyingTravellers.data[].lastName",
                      "value": "<% self.value %>"
                    }
                  ]
                },
                {
                  "type": "hidden",
                  "id": "addToOOBTxt",
                  "value": "<% travelDeatilsPanels.addToOOBProfile %>",
                  "valuesOut": [
                    {
                      "valueOutBinding": "createAccompanyingTravellers.data[].addToOOBProfile",
                      "value": "<% self.value %>"
                    },
                    {
                      "valueOutBinding": "updateAccompanyingTravellers.data[].addToOOBProfile",
                      "value": "<% self.value %>"
                    }
                  ]
                },
                {
                  "type": "hidden",
                  "id": "addTravellerNamesTxt",
                  "value": "<% !empty(travelDeatilsPanels.travellerNames) ? travelDeatilsPanels.travellerNames : 'empty' %>",
                  "valuesOut": [
                    {
                      "valueOutBinding": "createAccompanyingTravellers.data[].travellerNames",
                      "value": "<% self.value %>"
                    },
                    {
                      "valueOutBinding": "updateAccompanyingTravellers.data[].travellerNames",
                      "value": "<% self.value %>"
                    }
                  ]
                },
                {
                  "type": "text",
                  "id": "stsValue",
                  "label": "<% 'Segment Specific STS' %>",
                  "value": "<% !empty(flowVariables.sts) ? !empty(flowVariables.otherSTS) ? flowVariables.otherSTS : flowVariables.sts : '' %>",
                  "valuesOut": [
                    {
                      "valueOutBinding": "createAccompanyingTravellers.data[].sts",
                      "value": "<% self.value %>"
                    },
                    {
                      "valueOutBinding": "updateAccompanyingTravellers.data[].sts",
                      "value": "<% self.value %>"
                    }
                  ]
                },
                {
                  "type": "date",
                  "label": "Departure Date",
                  "id": "departureDateDt",
                  "required": true,
                  "enabled": true,
                  "value": "<% !empty(travelDeatilsPanels.departureDate) ? travelDeatilsPanels.departureDate : '' %>",
                  "valuesOut": [
                    {
                      "valueOutBinding": "createAccompanyingTravellers.data[].departureDate",
                      "value": "<% self.value %>"
                    },
                    {
                      "valueOutBinding": "updateAccompanyingTravellers.data[].departureDate",
                      "value": "<% self.value %>"
                    }
                  ]
                },
                {
                  "type": "time",
                  "label": "Departure Time (Enter in 24-hour time, or specify AM/PM)",
                  "id": "departureTimeTxt",
                  "required": true,
                  "enabled": true,
                  "timePrecision": "MINUTE",
                  "timeFormat": "HH:mm",
                  "timeDisplayPattern": "HH:mm",
                  "value": "<% !empty(travelDeatilsPanels.departureTime) ? travelDeatilsPanels.departureTime : '' %>",
                  "valuesOut": [
                    {
                      "valueOutBinding": "createAccompanyingTravellers.data[].departureTime",
                      "value": "<% Dates.getTimeFormatted(self.value) %>"
                    },
                    {
                      "valueOutBinding": "updateAccompanyingTravellers.data[].departureTime",
                      "value": "<%  Dates.getTimeFormatted(self.value) %>"
                    }
                  ]
                },
                {
                  "type": "date",
                  "label": "Arrival Date",
                  "id": "arrivalDateDt",
                  "required": true,
                  "enabled": true,
                  "value": "<% !empty(travelDeatilsPanels.arrivalDate) ? travelDeatilsPanels.arrivalDate : '' %>",
                  "valuesOut": [
                    {
                      "valueOutBinding": "createAccompanyingTravellers.data[].arrivalDate",
                      "value": "<% self.value %>"
                    },
                    {
                      "valueOutBinding": "updateAccompanyingTravellers.data[].arrivalDate",
                      "value": "<% self.value %>"
                    }
                  ]
                },
                {
                  "type": "time",
                  "label": "Arrival Time (Enter in 24-hour time, or specify AM/PM)",
                  "id": "arrivalTimeTxt",
                  "required": true,
                  "enabled": true,
                  "timePrecision": "MINUTE",
                  "timeFormat": "HH:mm",
                  "timeDisplayPattern": "HH:mm",
                  "value": "<% !empty(travelDeatilsPanels.arrivalTime) ? travelDeatilsPanels.arrivalTime : '' %>",
                  "valuesOut": [
                    {
                      "valueOutBinding": "createAccompanyingTravellers.data[].arrivalTime",
                      "value": "<% Dates.getTimeFormatted(self.value) %>"
                    },
                    {
                      "valueOutBinding": "updateAccompanyingTravellers.data[].arrivalTime",
                      "value": "<% Dates.getTimeFormatted(self.value) %>"
                    }
                  ]
                },
                {
                  "type": "instanceList",
                  "label": "Mode of Transport",
                  "id": "modeOfTransportIL",
                  "multiSelect": false,
                  "required": true,
                  "enabled": true,
                  "values": "<% OOB.getModeOfTransport() %>",
                  "selectedValuesAndDescriptors": "<% !empty(travelDeatilsPanels.modeOfTransport) ? [OOB.getModeOfTransport().find(x => {x.descriptor == travelDeatilsPanels.modeOfTransport})] : [] %>",
                  "onChange": "<%
                    !empty(self.selectedEntries[0]) ? modeOfTransportName.setValue(self.selectedEntries[0].descriptor) :  modeOfTransportName.setValue('');
                    if(!empty(self.selectedEntries[0])) {
                      if(self.selectedEntries[0].id == 'air'){
                        var toggleOn = [departureAirportTxt, arrivalAirportTxt,airlineTxt];
                        var toggleOff = [yourVehicleRG,busNumberTxt, modeOfTransportOtherTxt, giveCarDetailsTxt];
                        togglewidgets(toggleOn,toggleOff);
                      }else if (self.selectedEntries[0].id == 'car'){
                        var toggleOn = [yourVehicleRG, giveCarDetailsTxt];
                        var toggleOff = [departureAirportTxt,arrivalAirportTxt,airlineTxt, modeOfTransportOtherTxt,busNumberTxt];
                        togglewidgets(toggleOn,toggleOff );
                       }else if (self.selectedEntries[0].id == 'bus'){
                         var toggleOn = [busNumberTxt, departureAirportTxt,arrivalAirportTxt];
                         var toggleOff = [airlineTxt, yourVehicleRG, modeOfTransportOtherTxt, giveCarDetailsTxt];
                         togglewidgets(toggleOn,toggleOff );
                       }else if (self.selectedEntries[0].id == 'train'){
                         var toggleOn = [busNumberTxt, departureAirportTxt,arrivalAirportTxt];
                         var toggleOff = [airlineTxt, modeOfTransportOtherTxt, giveCarDetailsTxt, yourVehicleRG];
                         togglewidgets(toggleOn,toggleOff );
                       }else if (self.selectedEntries[0].id == 'boat'){
                         var toggleOn = [busNumberTxt, departureAirportTxt,arrivalAirportTxt];
                         var toggleOff = [airlineTxt, modeOfTransportOtherTxt, giveCarDetailsTxt, yourVehicleRG];
                         togglewidgets(toggleOn,toggleOff );
                       }else if (self.selectedEntries[0].id == 'other'){
                         var toggleOn = [modeOfTransportOtherTxt];
                         var toggleOff = [airlineTxt, yourVehicleRG, giveCarDetailsTxt,busNumberTxt, departureAirportTxt, arrivalAirportTxt];
                         togglewidgets(toggleOn,toggleOff );
                       }else{
                         var toggleOn = [];
                         var toggleOff = [airlineTxt, modeOfTransportOtherTxt, yourVehicleRG, giveCarDetailsTxt,busNumberTxt, departureAirportTxt, arrivalAirportTxt];
                         togglewidgets(toggleOn,toggleOff );
                       }
                    }else{
                      var toggleOn = [];
                      var toggleOff = [airlineTxt, modeOfTransportOtherTxt, yourVehicleRG, giveCarDetailsTxt,busNumberTxt, departureAirportTxt, arrivalAirportTxt];
                      togglewidgets(toggleOn,toggleOff );
                    }
                  %>"
                },
                {
                  "type": "hidden",
                  "id": "modeOfTransportName",
                  "value": "",
                  "valuesOut": [
                    {
                      "valueOutBinding": "createAccompanyingTravellers.data[].modeOfTransport",
                      "value": "<% self.value %>"
                    },
                    {
                      "valueOutBinding": "updateAccompanyingTravellers.data[].modeOfTransport",
                      "value": "<% self.value %>"
                    }
                  ]
                },
                {
                  "type": "text",
                  "label": "Bus/Train/Boat Number",
                  "id": "busNumberTxt",
                  "required": false,
                  "visible": "<% travelDeatilsPanels.modeOfTransport == 'Bus' || travelDeatilsPanels.modeOfTransport == 'Train' || travelDeatilsPanels.modeOfTransport == 'Boat' %>",
                  "enabled": true,
                  "value": "<% !empty(travelDeatilsPanels.transportNumber) ? travelDeatilsPanels.transportNumber : '' %>",
                  "valuesOut": [
                    {
                      "valueOutBinding": "createAccompanyingTravellers.data[].transportNumber",
                      "value": "<% self.value %>"
                    },
                    {
                      "valueOutBinding": "updateAccompanyingTravellers.data[].transportNumber",
                      "value": "<% self.value %>"
                    }
                  ]
                },
                {
                  "type": "text",
                  "label": "Airline",
                  "visible": "<% travelDeatilsPanels.modeOfTransport == 'Air'  %>",
                  "id": "airlineTxt",
                  "required": false,
                  "enabled": true,
                  "value": "<% !empty(travelDeatilsPanels.airline) ? travelDeatilsPanels.airline : '' %>",
                  "valuesOut": [
                    {
                      "valueOutBinding": "createAccompanyingTravellers.data[].airline",
                      "value": "<% self.value %>"
                    },
                    {
                      "valueOutBinding": "updateAccompanyingTravellers.data[].airline",
                      "value": "<% self.value %>"
                    }
                  ]
                },
                {
                  "type": "text",
                  "label": "Departure location",
                  "id": "departureAirportTxt",
                  "required": false,
                  "visible": "<% travelDeatilsPanels.modeOfTransport == 'Bus' || travelDeatilsPanels.modeOfTransport == 'Train' || travelDeatilsPanels.modeOfTransport == 'Boat' || travelDeatilsPanels.modeOfTransport == 'Air' %>",
                  "enabled": true,
                  "value": "<% !empty(travelDeatilsPanels.departurePoint) ? travelDeatilsPanels.departurePoint : '' %>",
                  "valuesOut": [
                    {
                      "valueOutBinding": "createAccompanyingTravellers.data[].departurePoint",
                      "value": "<% self.value %>"
                    },
                    {
                      "valueOutBinding": "updateAccompanyingTravellers.data[].departurePoint",
                      "value": "<% self.value %>"
                    }
                  ]
                },
                {
                  "type": "text",
                  "label": "Arrival location",
                  "id": "arrivalAirportTxt",
                  "required": false,
                  "visible": "<% travelDeatilsPanels.modeOfTransport == 'Bus' || travelDeatilsPanels.modeOfTransport == 'Train' || travelDeatilsPanels.modeOfTransport == 'Boat' || travelDeatilsPanels.modeOfTransport == 'Air' %>",
                  "enabled": true,
                  "value": "<% !empty(travelDeatilsPanels.arrivalPoint) ? travelDeatilsPanels.arrivalPoint : '' %>",
                  "valuesOut": [
                    {
                      "valueOutBinding": "createAccompanyingTravellers.data[].arrivalPoint",
                      "value": "<% self.value %>"
                    },
                    {
                      "valueOutBinding": "updateAccompanyingTravellers.data[].arrivalPoint",
                      "value": "<% self.value %>"
                    }
                  ]
                },
                {
                  "type": "radioGroup",
                  "label": "Is this your assigned vehicle?",
                  "id": "yourVehicleRG",
                  "required": false,
                  "hideDisplayOption": true,
                  "visible": "<% travelDeatilsPanels.modeOfTransport == 'Car' %>",
                  "selectedValues": "<% !empty(travelDeatilsPanels.assignedVehicle) ? ['yes'] : ['no'] %>",
                  "enabled": true,
                  "instanceList": [
                    {
                      "id": "yes",
                      "descriptor": "Yes"
                    },
                    {
                      "id": "no",
                      "descriptor": "No"
                    }
                  ],
                  "valuesOut": [
                    {
                      "valueOutBinding": "createAccompanyingTravellers.data[].assignedVehicle",
                      "value": "<% self.value[0] == 'yes' ? true : false %>"
                    },
                    {
                      "valueOutBinding": "updateAccompanyingTravellers.data[].assignedVehicle",
                      "value": "<% self.value[0] == 'yes' ? true : false %>"
                    }
                  ]
                },
                {
                  "type": "text",
                  "label": "Give car details",
                  "id": "giveCarDetailsTxt",
                  "visible": "<% travelDeatilsPanels.modeOfTransport == 'Car' %>",
                  "required": false,
                  "enabled": true,
                  "value": "<% !empty(travelDeatilsPanels.carDetails) ? travelDeatilsPanels.carDetails : '' %>",
                  "valuesOut": [
                    {
                      "valueOutBinding": "createAccompanyingTravellers.data[].carDetails",
                      "value": "<% self.value %>"
                    },
                    {
                      "valueOutBinding": "updateAccompanyingTravellers.data[].carDetails",
                      "value": "<% self.value %>"
                    }
                  ]
                },
                {
                  "type": "text",
                  "label": "Mode Of Transport Other",
                  "id": "modeOfTransportOtherTxt",
                  "required": false,
                  "visible": "<% travelDeatilsPanels.modeOfTransport == 'Other' %>",
                  "enabled": true,
                  "value": "<% !empty(travelDeatilsPanels.otherTransport) ? travelDeatilsPanels.otherTransport : '' %>",
                  "valuesOut": [
                    {
                      "valueOutBinding": "createAccompanyingTravellers.data[].otherTransport",
                      "value": "<% self.value %>"
                    },
                    {
                      "valueOutBinding": "updateAccompanyingTravellers.data[].otherTransport",
                      "value": "<% self.value %>"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "panelList",
          "label": "Lodging Events",
          "id": "LodgingPanel",
          "panels": "<% !empty(getDestinations.data) ? getDestinations.data : [] %>",
          "panelName": "lodgingDetailsPanels",
          "indexVariableName": "travelPanelIndex",
          "deleteEndPoint": "deleteDestinations",
          "isArrayOutBinding": false,
          "onPanelAdd": "<%
            var lodgingPanels = self.getPanels();
            var newPanel = lodgingPanels[lodgingPanels.size() - 1];
            //newPanel.getChildren()[0].lodgingTravellerNameTxt.setValue(travellerNameTxt.value);
          %>",
          "children": [
            {
              "type": "fieldSet",
              "id": "LodgingDetails",
              "collapsible": true,
              "title": "<% 'Lodging/Destination Details - ' + (!empty(lodgingDetailsPanels.travellerName) ? lodgingDetailsPanels.travellerName : '') %>",
              "children": [
                {
                  "type": "instanceList",
                  "label": "Traveler Destiantions ",
                  "id": "travellerDestinationsIL",
                  "required": true,
                  "enabled": true,
                  "idKey": "id",
                  "displayKey": "descriptor",
                  "multiSelect": true,
                  "_values": "<% getAccompanyTravllers.data.map(x => {{'id' : (x.firstName + ' ' + x.lastName), 'descriptor' : (x.firstName + ' ' + x.lastName)}}).distinct() %>",
                  "values": "<% !empty(pageVariables.travellerNames) ? pageVariables.travellerNames : [] %>",
                  "selectedValues": "<% !empty(lodgingDetailsPanels.id) && !empty(getDestinations.data) && !empty(getDestinations.data[0].travellerName) ? getDestinations.data.find(x => {x.id == lodgingDetailsPanels.id}).travellerName.split(',') : [] %>",
                  "onChange": "<%
                    if(empty(self.selectedEntries[0])){
                      lodgingTravellerNameTxt.setValue('');
                      LodgingDetails.setTitle('Lodging/Destination Details');
                    }else if(!empty(self.selectedEntries[0])){
                      LodgingDetails.setTitle('Lodging/Destination Details - ' + self.getSelectedEntries().map(x => {x.descriptor}).join());
                      lodgingTravellerNameTxt.setValue(self.getSelectedEntries().map(x => {x.descriptor}).join());
                    }
                  %>"
                },
                {
                  "type": "hidden",
                  "id": "oobRequestIDDestintation",
                  "value": "<%  !empty(flowVariables.oobRequest) ? flowVariables.oobRequest : '' %>",
                  "valuesOut": [
                    {
                      "valueOutBinding": "createDestinations.data[].oobRequest.id",
                      "value": "<% self.value %>"
                    },
                    {
                      "valueOutBinding": "updateDestinations.data[].oobRequest.id",
                      "value": "<% self.value %>"
                    }
                  ]
                },
                {
                  "type": "hidden",
                  "id": "oobProfileIDDestintation",
                  "value": "<%  !empty(flowVariables.oobProfileID) ? flowVariables.oobProfileID : '' %>",
                  "valuesOut": [
                    {
                      "valueOutBinding": "createDestinations.data[].oobProfile.id",
                      "value": "<% self.value %>"
                    },
                    {
                      "valueOutBinding": "updateDestinations.data[].oobProfile.id",
                      "value": "<% self.value %>"
                    }
                  ]
                },
                {
                  "type": "hidden",
                  "id": "destinationID",
                  "value": "<%  !empty(lodgingDetailsPanels.id) ? lodgingDetailsPanels.id : '' %>",
                  "valuesOut": [
                    {
                      "valueOutBinding": "createDestinations.data[].id",
                      "value": "<% self.value %>"
                    },
                    {
                      "valueOutBinding": "updateDestinations.data[].id",
                      "value": "<% self.value %>"
                    }
                  ]
                },
                {
                  "type": "hidden",
                  "id": "lodgingTravellerNameTxt",
                  "value": "<% !empty(lodgingDetailsPanels.travellerName) ? lodgingDetailsPanels.travellerName : '' %>",
                  "valuesOut": [
                    {
                      "valueOutBinding": "createDestinations.data[].travellerName",
                      "value": "<% self.value %>"
                    },
                    {
                      "valueOutBinding": "updateDestinations.data[].travellerName",
                      "value": "<% self.value %>"
                    }
                  ]
                },
                {
                  "type": "section",
                  "columnWidthRatios": [
                    0.5,
                    0.5
                  ],
                  "horizontal": true,
                  "children": [
                    {
                      "type": "date",
                      "label": "Start Date",
                      "id": "lodgingStartDateDt",
                      "required": true,
                      "enabled": true,
                      "value": "<% !empty(lodgingDetailsPanels.startDate) ? lodgingDetailsPanels.startDate : '' %>",
                      "valuesOut": [
                        {
                          "valueOutBinding": "createDestinations.data[].startDate",
                          "value": "<% self.value %>"
                        },
                        {
                          "valueOutBinding": "updateDestinations.data[].startDate",
                          "value": "<% self.value %>"
                        }
                      ]
                    },
                    {
                      "type": "date",
                      "label": "End Date",
                      "id": "lodgingEndDateDt",
                      "required": true,
                      "enabled": true,
                      "value": "<% !empty(lodgingDetailsPanels.endDate) ? lodgingDetailsPanels.endDate : '' %>",
                      "valuesOut": [
                        {
                          "valueOutBinding": "createDestinations.data[].endDate",
                          "value": "<% self.value %>"
                        },
                        {
                          "valueOutBinding": "updateDestinations.data[].endDate",
                          "value": "<% self.value %>"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "instanceList",
                  "label": "Lodging/Destination Name",
                  "id": "lodgingIL",
                  "multiSelect": false,
                  "required": true,
                  "enabled": true,
                  "selectedValuesAndDescriptors": "<% !empty(getDestinations.data[0].descriptor) ? !empty(getDestinations.data.find(x => {x.descriptor == lodgingDetailsPanels.descriptor})) ? [getDestinations.data.find(x => {x.descriptor == lodgingDetailsPanels.descriptor})] : [] : [] %>",
                  "_selectedValuesAndDescriptors": "<% !empty(lodgingDetailsPanels.name) ? !empty(pageVariables.lodgingList.find(x => {x.descriptor == lodgingDetailsPanels.name})) ? [pageVariables.lodgingList.find(x => {x.descriptor == lodgingDetailsPanels.name})] : [] : [] %>",
                  "values": "<% pageVariables.lodgingList %>",
                  "onChange": "<%
                    if(empty(self.selectedEntries[0])){
                      lodgingOtherTxt.value = ''; lodgingOtherTxt.setVisible(false); lodgingOtherTxt.setRequired(false);
                      freqDestChbx.setVisible(false);
                      freqDestChbx.setValue(false);
                      countryIl.setValues([]);
                      countryIl.setValue([]);
                      addressLine1Txt.setValue('');
                      addressLine2Txt.setValue('');
                      addressLine3Txt.setValue('');
                      postalCodeTxt.setValue('');
                      contactNumberOfDestinationTxt.setValue('');
                      cityText.setValue('');
                      countryCodeText.setValue('');
                      stateText.setValue('');
                    }else if(self.selectedEntries[0].id == 'other'){
                      lodgingOtherTxt.value = ''; lodgingOtherTxt.setVisible(true); lodgingOtherTxt.setRequired(true); lodgingOtherTxt.setEnabled(true);
                      freqDestChbx.setVisible(true);
                      countryIl.setValues([]);
                      countryIl.setValue([]);
                      addressLine1Txt.setValue('');
                      addressLine2Txt.setValue('');
                      addressLine3Txt.setValue('');
                      postalCodeTxt.setValue('');
                      contactNumberOfDestinationTxt.setValue('');
                      cityText.setValue('');
                      countryCodeText.setValue('');
                      stateText.setValue('');
                      freqDestChbx.setValue(false);
                    }else{
                      lodgingOtherTxt.setValue(self.selectedEntries[0].descriptor); lodgingOtherTxt.setRequired(false); lodgingOtherTxt.setEnabled(false);
                      freqDestChbx.setVisible(false);
                      var valueToFindAgain = self.selectedEntries[0].id;
                      //var destinationData = getLodging.data[0].favouriteDestinations.find(x=>{x.id == valueToFindAgain});
                      //var destinationData = getDestinations.data.find(x=>{x.id == valueToFindAgain});
                      var destinationData = getDestinationsOnProfile.data.find(x=>{x.id == valueToFindAgain});
                      countryIl.setValues([{'id' : destinationData.countryCode, 'descriptor' : destinationData.countryCode}] ?: []);
                      countryIl.setValue([destinationData.countryCode] ?: []);
                      addressLine1Txt.setValue(destinationData.addressLine1 ?: '');
                      addressLine2Txt.setValue(destinationData.addressLine2 ?: '');
                      addressLine3Txt.setValue(destinationData.addressLine3 ?: '');
                      postalCodeTxt.setValue(destinationData.postalCode ?: '');
                      contactNumberOfDestinationTxt.setValue(destinationData.contactNumber ?: '');
                      cityText.setValue(destinationData.city ?: '');
                      countryCodeText.setValue(destinationData.countryCode ?: '');
                      stateText.setValue(destinationData.state ?: '');
                      freqDestChbx.setValue(false);
                   }
                   %>"
                },
                {
                  "type": "text",
                  "label": "Lodging Name",
                  "id": "lodgingOtherTxt",
                  "required": false,
                  "enabled": false,
                  "visible": true,
                  "value": "<% !empty(lodgingDetailsPanels.descriptor) ? lodgingDetailsPanels.descriptor : ''  %>",
                  "valuesOut": [
                    {
                      "valueOutBinding": "createDestinations.data[].name",
                      "value": "<% self.value %>"
                    },
                    {
                      "valueOutBinding": "updateDestinations.data[].name",
                      "value": "<% self.value %>"
                    }
                  ]
                },
                {
                  "type": "instanceList",
                  "label": "Country",
                  "id": "countryIl",
                  "multiSelect": false,
                  "required": true,
                  "enabled": true,
                  "visible": true,
                  "selectedValuesAndDescriptors": "<% !empty(lodgingDetailsPanels.countryCode) ? [getCountry.data.find(x => {x.id == lodgingDetailsPanels.countryCode})] : [] %>",
                  "searchEndPoint": "<% endpoints.getCountrySearch %>",
                  "searchResultValues": "<% !empty(getCountrySearch.data) ? getCountrySearch.data : [] %>",
                  "values": "<% !empty(getCountry.data) ? getCountry.data : [] %>",
                  "onChange": "<%
                    if(empty(self.selectedEntries[0])){
                      countryText.value = '';
                      countryCodeText.value = '';
                    }else{
                      countryText.value = self.selectedEntries[0].descriptor;
                      countryCodeText.value = self.selectedEntries[0].id;
                    }
                  %>"
                },
                {
                  "type": "hidden",
                  "id": "countryText",
                  "value": ""
                },
                {
                  "type": "text",
                  "id": "countryCodeText",
                  "label": "Country Code",
                  "enabled": false,
                  "value": "<% !empty(lodgingDetailsPanels.countryCode) ? lodgingDetailsPanels.countryCode : '' %>",
                  "valuesOut": [
                    {
                      "valueOutBinding": "createDestinations.data[].countryCode",
                      "value": "<% self.value %>"
                    },
                    {
                      "valueOutBinding": "updateDestinations.data[].countryCode",
                      "value": "<% self.value %>"
                    }
                  ]
                },
                {
                  "type": "text",
                  "label": "Address Line 1",
                  "id": "addressLine1Txt",
                  "required": true,
                  "enabled": true,
                  "value": "<% !empty(lodgingDetailsPanels.addressLine1) ? lodgingDetailsPanels.addressLine1 : '' %>",
                  "valuesOut": [
                    {
                      "valueOutBinding": "createDestinations.data[].addressLine1",
                      "value": "<% self.value %>"
                    },
                    {
                      "valueOutBinding": "updateDestinations.data[].addressLine1",
                      "value": "<% self.value %>"
                    }
                  ]
                },
                {
                  "type": "text",
                  "label": "Address Line 2",
                  "id": "addressLine2Txt",
                  "required": false,
                  "enabled": true,
                  "value": "<% !empty(lodgingDetailsPanels.addressLine2) ? lodgingDetailsPanels.addressLine2 : '' %>",
                  "valuesOut": [
                    {
                      "valueOutBinding": "createDestinations.data[].addressLine2",
                      "value": "<% self.value %>"
                    },
                    {
                      "valueOutBinding": "updateDestinations.data[].addressLine2",
                      "value": "<% self.value %>"
                    }
                  ]
                },
                {
                  "type": "text",
                  "label": "Address Line 3",
                  "id": "addressLine3Txt",
                  "required": false,
                  "enabled": true,
                  "value": "<% !empty(lodgingDetailsPanels.addressLine3) ? lodgingDetailsPanels.addressLine3 : '' %>",
                  "valuesOut": [
                    {
                      "valueOutBinding": "createDestinations.data[].addressLine3",
                      "value": "<% self.value %>"
                    },
                    {
                      "valueOutBinding": "updateDestinations.data[].addressLine3",
                      "value": "<% self.value %>"
                    }
                  ]
                },
                {
                  "type": "text",
                  "label": "City",
                  "id": "cityText",
                  "enabled": true,
                  "required": true,
                  "value": "<% !empty(lodgingDetailsPanels.city) ? lodgingDetailsPanels.city : '' %>",
                  "valuesOut": [
                    {
                      "valueOutBinding": "createDestinations.data[].city",
                      "value": "<% self.value %>"
                    },
                    {
                      "valueOutBinding": "updateDestinations.data[].city",
                      "value": "<% self.value %>"
                    }
                  ]
                },
                {
                  "type": "text",
                  "id": "stateText",
                  "label": "State/Province/County",
                  "enabled": true,
                  "value": "<% !empty(lodgingDetailsPanels.state) ? lodgingDetailsPanels.state : '' %>",
                  "valuesOut": [
                    {
                      "valueOutBinding": "createDestinations.data[].state",
                      "value": "<% self.value %>"
                    },
                    {
                      "valueOutBinding": "updateDestinations.data[].state",
                      "value": "<% self.value %>"
                    }
                  ]
                },
                {
                  "type": "text",
                  "label": "Postal Code",
                  "id": "postalCodeTxt",
                  "required": false,
                  "enabled": true,
                  "value": "<% !empty(lodgingDetailsPanels.postalCode) ? lodgingDetailsPanels.postalCode : '' %>",
                  "valuesOut": [
                    {
                      "valueOutBinding": "createDestinations.data[].postalCode",
                      "value": "<% self.value %>"
                    },
                    {
                      "valueOutBinding": "updateDestinations.data[].postalCode",
                      "value": "<% self.value %>"
                    }
                  ]
                },
                {
                  "type": "text",
                  "label": "Contact Number of Destination",
                  "id": "contactNumberOfDestinationTxt",
                  "required": false,
                  "enabled": true,
                  "value": "<% !empty(lodgingDetailsPanels.contactNumber) ? lodgingDetailsPanels.contactNumber : '' %>",
                  "valuesOut": [
                    {
                      "valueOutBinding": "createDestinations.data[].contactNumber",
                      "value": "<% self.value %>"
                    },
                    {
                      "valueOutBinding": "updateDestinations.data[].contactNumber",
                      "value": "<% self.value %>"
                    }
                  ]
                },
                {
                  "type": "checkBox",
                  "label": "Add this location to my frequent destination list",
                  "id": "freqDestChbx",
                  "required": false,
                  "visible": false,
                  "enabled": true,
                  "trueLabel": "True Label",
                  "falseLabel": "False Label",
                  "value": "<% !empty(lodgingDetailsPanels.addToProfile) && lodgingDetailsPanels.addToProfile ? true : false %>",
                  "valuesOut": [
                    {
                      "value": "<% self.value %>",
                      "valueOutBinding": "createDestinations.data[].addToProfile"
                    },
                    {
                      "valueOutBinding": "updateDestinations.data[].addToProfile",
                      "value": "<% self.value %>"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "editButtonBar",
          "editButtons": [
            {
              "type": "editButton",
              "label": "<% 'Back' %>",
              "id": "backBtn",
              "ignoreRequiredFields": true,
              "sortOrder": "a",
              "buttonType": "AUXILIARY"
            },
            {
              "type": "editButton",
              "label": "<% 'Next' %>",
              "buttonType": "PRIMARY",
              "sortOrder": "b",
              "id": "nextBtn"
            },
            {
              "type": "editButton",
              "label": "<% 'Save For Later' %>",
              "id": "saveForLaterBtn",
              "sortOrder": "c",
              "buttonType": "AUXILIARY"
            }
          ]
        }
      ]
    }
  }
}